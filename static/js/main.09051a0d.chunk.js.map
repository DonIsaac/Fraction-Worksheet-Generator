{"version":3,"sources":["lib/util.ts","lib/fractions/fraction.gen.ts","lib/fractions/fraction.ts","lib/questions/question.gen.ts","lib/questions/question.ts","lib/types.ts","components/fraction/index.ts","components/fraction/Fraction.tsx","components/fraction/util.ts","components/fraction/FractionInput.tsx","state/questions.config.ts","state/questions.ts","state/middleware.ts","state/store.ts","state/dispatchers.ts","state/index.ts","components/button/Button.tsx","components/question/QuestionBody.tsx","components/question/FillBlanksQuestion.tsx","components/page/FlowWorksheet.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["gcd","a","b","lcm","floatToInt","num","scale","Number","isInteger","MAX_VALUE","randomInt","min","max","Math","floor","random","raise","RangeError","err","Error","captureStackTrace","symbolFor","op","Operation","Addition","Subtraction","Multiplication","Division","gen","Fraction","numerator","denominator","isNegative","equals","this","eq","abs","isNeg","simplify","other","strictEq","divisor","denom","s1","s2","sign","neg","mult","reciprocal","generators","negative","range","mixedFractions","generateQuestion","operations","strategy","countRange","_genQuestion","operation","length","count","args","rest","left","right","solveQuestion","q","opts","add","sub","div","FractionComponent","parens","frac","FractionBase","React","forwardRef","ref","className","classNames","role","aria-label","VALID_INT_REGEX","VALID_POSITIVE_INT_REGEX","userInputToFraction","d","n","test","parseInt","getDisplayMode","isDone","isCorrect","userSolution","Array","FractionInput","onChange","mode","readonly","filled","updateValue","field","e","currentTarget","value","commonInputProps","style","width","backgroundColor","borderStyle","type","pattern","disabled","name","onInput","title","initialState","questionConfig","createSlice","reducers","addOperation","state","action","includes","payload","push","removeOperation","filter","el","setValueRange","setStrategy","setMixedFractions","actions","questions","worksheet","clearQuestions","setQuestions","map","question","answer","answerQuestion","prepare","i","reducer","setDone","debug","Debug","logger","store","next","result","getState","crashReporter","combineReducers","configureStore","middleware","defaults","serializableCheck","concat","generateQuestions","dispatch","Button","primary","size","label","children","props","join","QuestionBody","QuestionNode","QuestionModeIcon","FillBlanksQuestion","questionNum","solution","useMemo","f","ConnectedFillBlanksQuestion","useDispatch","useSelector","shallowEqual","val","FlowWorksheet","numQuestions","times","onClick","App","dispatchers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","namespaces","process","DEBUG","enable","log","console","info","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09051a0d.chunk.js","sourcesContent":["import { Operation } from \"./types\"\n\n/**\n * Finds the greatest common divisor between two numbers\n *\n * @param a\n * @param b\n *\n * @see {@link https://en.wikipedia.org/wiki/Euclidean_algorithm Euclid's Algorithm}\n */\nexport const gcd = (a: number, b: number): number =>\n    b <= 0\n        ? a\n        : gcd(b, a % b)\n\n/**\n * Finds the least common multiple (LCM) for two numbers.\n *\n * @param a\n * @param b\n *\n * @see {@link https://artofproblemsolving.com/wiki/index.php/Least_common_multiple}\n */\nexport const lcm = (a: number, b: number): number => a * b / gcd(a, b)\n\n/**\n * Multiplies a decimal by 10 until it is an integer\n *\n * ```ts\n * floatToInt(1.5) // => [15, 10]\n * floatToInt(7) // => [7, 1]\n * floatToInt(3.14) // => [314, 100]\n * ```\n * @param num\n * @param scale Used for recursive calls. Do not use this.\n */\nexport const floatToInt = (num: number, scale = 1): [number, number] =>\n    Number.isInteger(num) && (num < Number.MAX_VALUE / 100)\n        ? [num, scale]\n        : floatToInt(num * 10, scale * 10)\n\n/**\n * Generates a random integer between `min` (inclusive) and `max` (exclusive).\n *\n * @param min G\n * @param max\n *\n * @throws if `max` is not strictly greater than `min`\n * @returns the generated int\n */\nexport const randomInt = (min: number, max: number): number =>\n    max > min\n        ? Math.floor(Math.random() * (max - min)) + min\n        : raise(new RangeError(\"Range max must be greater than the min\"))\n\n\n/**\n * Calls a function a certain number of times\n * @param n the number of iterations\n */\nexport const times = (n: number) => <T>(fn: (i: number) => T): T[] => (\n    n = Math.max(n, 0),\n    Array(n).fill(n).map((_, i) => fn(i))\n)\n\n/**\n * Throws an error.\n *\n * @param err The error to throw, or an error message (which is passed to a new Error)\n */\nexport const raise = (err: Error | string): never => {\n    if (typeof err === \"string\") {\n        err = new Error(err)\n        // Don't include throws() in the stack trace\n        Error.captureStackTrace(err, raise)\n    }\n\n    throw err\n}\n\nexport const symbolFor = (op: Operation): string => {\n    switch (op) {\n        case Operation.Addition: return \"+\"\n        case Operation.Subtraction: return \"-\"\n        case Operation.Multiplication: return \"\\u00d7\"\n        case Operation.Division: return \"\\u00f7\"\n    }\n}\n\n/**\n * Zips two arrays into one array where each element is a pair of values from the\n * first and the second arrays. Only supposed to be called on arrays of equal length.\n *\n * @param a first array\n * @param b second array\n * @returns array of pairs of values from the two arrays\n */\nexport const zip = <A, B>(a: A[], b: B[]): [A, B][] => a.map((a, i) => [a, b[i]])\n","import { Fraction } from \"../fractions/fraction\"\nimport { randomInt } from \"../util\"\nimport { Strategies, FractionGenerator, FractionGeneratorFactory } from \"../types\"\n\n/**\n * Maximum scale factor for mixed fractions. The actual scalar multiplied to\n * the generated numerator value is `[1, MIXED_FRAC_SCALAR)`.\n */\nconst MIXED_FRAC_SCALAR = 3\n\n/**\n * Creates a random `Fraction`. The `Fraction` created may be constrained by\n * various options.\n *\n * Options:\n * - `negative`: `true` to make the fraction negative, `false` otherwise.\n * - `range`: min, max values the numerator, denominator may take.\n * - `mixedFractions`: result may be (but is not guaranteed to be) a mixed\n *   fraction.\n * @param gen the number generator used to create the numerator and denominator\n *            values\n *\n * @see Fraction\n */\nexport const generateFraction: FractionGeneratorFactory = gen => ({\n    negative,\n    range,\n    mixedFractions,\n}): Fraction => {\n    // Generate a random denominator value\n    const denominator = gen(range)\n    // Generate a random numerator value. Use random scalar to increase value if\n    // Mixed values are desired\n    const numerator = gen(range) * (mixedFractions\n        ? randomInt(1, MIXED_FRAC_SCALAR)\n        : 1)\n    // Random sign if negatives are enabled false otherwise\n    // Const isNeg = negative && Math.random() < 0.5\n\n    return new Fraction(numerator, denominator, negative)\n}\n\nexport const generators: Record<Strategies, FractionGenerator> = {\n    \"default\": generateFraction(([min, max]) => randomInt(min, max)),\n}\n\n/*\nExport const generateFraction: FractionGeneratorFactory = (denom: () => number) => (\n    digitCount: number,\n    sign: boolean = Math.random() < 0.5\n): Fraction => {\n    const min = 10 ** (digitCount - 1)\n    const max = 10 ** digitCount\n    const numerator = randomInt(min, max)\n    const denominator = randomInt(min, max)\n\n    return new Fraction(numerator, denominator, sign)\n}\n*/\n","import { floatToInt, gcd, lcm } from \"../util\"\n\nexport class Fraction {\n\n    /**\n     * Creates a fraction from a decimal number. The fraction will be automatically\n     * simplified.\n     *\n     * @param num\n     */\n    public static fromDecimal(num: number): Fraction {\n        const isNeg = num < 0\n        if (isNeg) num *= -1\n        const [n, d] = floatToInt(num)\n\n        return new Fraction(n, d, isNeg).simplify()\n    }\n\n    public readonly numerator: number\n    public readonly denominator: number\n    public readonly isNegative: boolean\n\n    /**\n     * Creates a new `Fraction`.\n     *\n     * @param numerator     The fraction's numerator. Must be positive.\n     * @param denominator   The fraction's denominator. Cannot be zero.\n     * @param isNegative    `true` to make the fraction negative, `false` to make it positive.\n     */\n    constructor(\n        numerator: number,\n        denominator = 1,\n        isNegative: boolean | null = null\n    ) {\n        if (\n            !Number.isInteger(numerator)\n        ) {\n            throw new RangeError(\n                `Illegal numerator ${numerator}: must be a ` +\n                \"finite integer greater than or equal to 0\"\n            )\n        }\n        if (numerator < 0 && isNegative === false) {\n            throw new Error(\"Numerator value was negative, but fraction was explicitly declared positive\")\n        }\n\n        if (\n            denominator <= 0 ||\n            !Number.isInteger(denominator)\n        ) {\n            throw new RangeError(\n                `Illegal denominator ${denominator}: must be a ` +\n                \"positive finite integer\"\n            )\n        }\n\n        this.numerator = Math.abs(numerator)\n        this.denominator = denominator\n        this.isNegative = numerator < 0 || !!isNegative\n        // This.simplify()\n    }\n\n    public toDecimal(): number {\n        return (this.isNegative ? -1 : 1) * (this.numerator / this.denominator)\n    }\n\n    /**\n     * Checks if `this` is exactly equal to `other`, regardless if they are\n     * equivalent.\n     *\n     * @param other the fraction to check against.\n     *\n     * @returns `true` if the two fractions are exactly equal, `false` otherwise.\n     */\n    public strictEq(other: Fraction): boolean {\n        // Same object pointer\n        return this === other ||\n            // Both are 0\n            (this.numerator === 0 && other.numerator === 0) ||\n            // Numerator, denominator, and sign are the same\n            (this.numerator === other.numerator &&\n                this.denominator === other.denominator &&\n                this.isNegative === other.isNegative)\n    }\n\n    /**\n     * Checks if `this` is mathematically equal to `other`.\n     *\n     * @param other The fraction to check against.\n     *\n     * @returns `true` if they are equal, `false` otherwise.\n     */\n    public eq(other: Fraction): boolean {\n        // Return this.toDecimial() === other?.toDecimial()\n        if (\n            this === other ||\n            (this.numerator === 0 && other.numerator === 0)\n        ) {\n            return true\n        } else {\n            return this.simplify().strictEq(other.simplify())\n        }\n    }\n\n    /**\n     * Alias to `Fraction#eq()\n     *\n     * @see Fraction.prototype.eq\n     */\n    public equals = this.eq\n\n    public simplify(): Fraction {\n        if (!this.numerator) {\n            return new Fraction(0, this.denominator, false)\n        }\n\n        const divisor = gcd(this.numerator, this.denominator)\n\n        return new Fraction(\n            this.numerator / divisor,\n            this.denominator / divisor,\n            this.isNegative\n        )\n    }\n\n    /**\n     * Adds `this` fraction with `other`.\n     *\n     * @param other\n     */\n    public add(other: Fraction): Fraction {\n        const denom = lcm(this.denominator, other.denominator),\n            s1 = denom / this.denominator,\n            s2 = denom / other.denominator\n\n        const n1 = this.sign * this.numerator * s1,\n            n2 = other.sign * other.numerator * s2\n\n        const numerator = n1 + n2\n        const neg = numerator < 0\n\n        return new Fraction(Math.abs(numerator), denom, neg).simplify()\n    }\n\n    /**\n     * Subtracts `other` from `this`.\n     *\n     * @param other\n     */\n    public sub(other: Fraction): Fraction {\n        const denom = lcm(this.denominator, other.denominator),\n            s1 = denom / this.denominator,\n            s2 = denom / other.denominator\n\n        const n1 = this.sign * this.numerator * s1,\n            n2 = other.sign * other.numerator * s2\n\n        const numerator = n1 - n2\n        const neg = numerator < 0\n\n        return new Fraction(Math.abs(numerator), denom, neg).simplify()\n    }\n\n    /**\n     * Multiplies `this` with `other`.\n     *\n     * @param other\n     */\n    public mult(other: Fraction): Fraction {\n        return new Fraction(\n            this.numerator * other.numerator,\n            this.denominator * other.denominator,\n            this.sign * other.sign < 0\n        ).simplify()\n    }\n\n    /**\n     * Divides `other` from `this`.\n     *\n     * @param other\n     */\n    public div(other: Fraction): Fraction {\n        if (other.numerator === 0) {\n            throw new Error(\"Cannot divide by zero.\")\n        }\n\n        return this.mult(other.reciprocal())\n    }\n\n    /**\n     * Gets the reciprocal of this fraction.\n     *\n     * ```ts\n     * new Fraction(1, 2).reciprocal() // => 2/1\n     * ```\n     */\n    public reciprocal(): Fraction {\n        if (this.numerator === 0) {\n            throw new Error(\"Cannot take reciprocal of zero\")\n        }\n\n        return new Fraction(this.denominator, this.numerator, this.isNegative)\n    }\n\n    public toString(): string {\n        return (this.isNegative ? \"-\" : \"\") +\n            `${this.numerator}/${this.denominator}`\n    }\n\n    private get sign(): number {\n        return this.isNegative ? -1 : 1\n    }\n}\n","import { QuestionGenerationConfig, FractionGenerator, Operation } from \"../types\"\nimport type { Question } from \".\"\nimport { randomInt } from \"../util\"\nimport { Fraction, generators } from \"../fractions\"\n\n/**\n * Creates a random question.\n *\n * @param args fraction and question generation settings\n *\n * @returns a newly created `Question`.\n *\n * @see Question\n */\nexport const generateQuestion: (args?: QuestionGenerationConfig) => Question =\n    ({ // Arguments are unpacked/repacked to establish defaults\n        operations = [Operation.Addition],\n        strategy = \"default\",\n        negative = false,\n        range = [1, 10] as [number, number],\n        countRange = [2, 3] as [number, number],\n        mixedFractions = false,\n    } = {}) => _genQuestion({\n        operation: operations[randomInt(0, operations.length)],\n        negative,\n        range,\n        count:     randomInt(...countRange),\n        gen:       generators[strategy],\n        mixedFractions,\n    })\n\ntype GenQuestionArgs = Required<Omit<QuestionGenerationConfig, \"strategy\" | \"countRange\" | \"operations\">> & {\n\n    /** The fraction factory to use */\n    gen: FractionGenerator\n\n    /** The number of fractions in the question */\n    count: number\n\n    /** Arithmetic operation for this question subsection */\n    operation: Operation\n}\nconst _genQuestion: (args: GenQuestionArgs) => Question = args => {\n    const {\n        operation, gen, negative, count, ...rest\n    } = args\n    const isNeg = negative && Math.random() < 0.5\n    const left: Fraction = gen({ negative: isNeg, ...rest })\n\n    return count <= 1\n        ? left\n        : {\n            operation,\n            left,\n            right: _genQuestion({ ...args, count: count - 1 }),\n        } as Question\n}\n","import { Fraction } from \"../fractions\"\nimport { Operation } from \"../types\"\n\n/**\n * A practice problem for the user to solve. Questions are generated by the\n * desired generator function selected by the user.\n *\n * @see FractionGenerator\n */\nexport type Question =\n    | Fraction\n    | {\n        operation: Operation\n        left: Fraction\n        right: Question\n    }\n    ;\n\nexport interface SolveQuestionOpts {\n\n    /** Whether or not to simplify the solution. Defaults to `false`. */\n    simplify?: boolean\n}\n\n/**\n * Calculates the solution to a Question.\n *\n * @param q     the question to solve.\n * @param opts  options to tweak solution behavior\n *\n * @returns     the solution to the Question.\n */\nexport const solveQuestion = (\n    q: Question,\n    opts: SolveQuestionOpts = {}\n): Fraction => {\n    const { simplify = false } = opts\n\n    if (q instanceof Fraction) {\n        return simplify ? q.simplify() : q\n    }\n\n    const { operation , left, right } = q\n\n    switch (operation) {\n        case Operation.Addition:\n            return solveQuestion(left, opts).add(solveQuestion(right, opts))\n        case Operation.Subtraction:\n            return solveQuestion(left, opts).sub(solveQuestion(right, opts))\n        case Operation.Multiplication:\n            return solveQuestion(left, opts).mult(solveQuestion(right, opts))\n        case Operation.Division:\n            return solveQuestion(left, opts).div(solveQuestion(right, opts))\n    }\n}\n","import type { Fraction } from \"./fractions\"\n\n/**\n * Configuration settings set by the user and passed to question generators.\n *\n * @see Question\n * @see FractionGenerator\n */\nexport interface QuestionGenerationConfig {\n\n    /**\n     *\n     * @default [Operation.Addition]\n     */\n    operations?: Operation[]\n\n    /**\n     * If false, neither the fractions in question or in the answer should\n     * be negative\n     *\n     * @default false\n     */\n    negative?: boolean;\n\n    /**\n     * Range of number values that may appear in numerator/denominator.\n     * @default [1,10]\n     */\n    range?: [min: number, max: number]\n\n    /**\n     * [min, max] number of fractions that may appear in each problem\n     *\n     * @default [2,2]\n     */\n    countRange?: [min: number, max: number]\n\n    /**\n     * Question generation strategy.\n     *\n     * @default \"default\"\n     */\n    strategy?: Strategies\n\n    /**\n     * Whether questions will include mixed fractions. If `false`, all\n     * fraction numerators will be less than or equal to their denominators.\n     *\n     * @default false\n     */\n    mixedFractions?: boolean\n\n}\n\n/**\n * Available operations in questions.\n */\nexport enum Operation {\n    Addition = \"add\",\n    Subtraction = \"sub\",\n    Multiplication = \"mult\",\n    Division = \"div\"\n}\n\nexport type NumGenArgs = [range: [number, number]]\n// Export type FractionGenerator = (digitCount: number, sign?: boolean) => Fraction;\nexport type FractionGenerator = (\n    config: Required<Pick<QuestionGenerationConfig, \"negative\" | \"range\" | \"mixedFractions\">>\n) => Fraction\nexport type FractionGeneratorFactory<T extends any[] = NumGenArgs> = (\n    gen: (...args: T) => number\n) => FractionGenerator\nexport type Strategies = \"default\"\nexport type Nullable<T> = T | null | undefined\n","export { FractionComponent } from \"./Fraction\"\nexport { FractionInput } from \"./FractionInput\"\nexport { getDisplayMode, userInputToFraction } from \"./util\"\n\n// Types are exported seperately because of --isolatedModules flag\nexport * from \"./types\"\nexport type { FractionComponentProps } from \"./Fraction\"\nexport type { FractionInputProps } from \"./FractionInput\"\n","import { FC } from \"react\"\nimport { Fraction } from \"../../lib\"\nimport classNames from \"classnames\"\nimport \"./Fraction.scss\"\nimport React from \"react\"\n\nexport interface FractionComponentProps {\n    frac: Fraction\n    parens?: boolean\n}\n\n/**\n * Displays an existing Function.\n *\n * @param props\n *\n * @see Function\n */\nexport const FractionComponent: FC<FractionComponentProps> = ({\n    parens = false,\n    frac,\n}) => <FractionBase {...{ parens, ...frac }} />\n\n// =============================================================================\nexport type FractionBaseProps = {\n    parens?: boolean\n    numerator: number | string | JSX.Element\n    denominator: number | string | JSX.Element\n    isNegative: boolean\n    className?: string | string[]\n}\nexport const FractionBase = React.forwardRef<\n    HTMLDivElement,\n    FractionBaseProps\n>(({\n    parens = false,\n    numerator,\n    denominator,\n    isNegative,\n    className,\n}, ref) => (\n    <div\n        className={classNames(\"fraction\", className)}\n        ref={ref}\n        role=\"math\"\n        aria-label={`${isNegative ? \"-\" : \"\"}${numerator}/${denominator}`}\n    >\n        {/* Open parenthesis, if specified */}\n        {parens && <span className=\"paren fullheight\">(</span>}\n        {/* Sign */}\n        {isNegative && <span className=\"fraction-sign\">-</span>}\n        {/* <div className=\"fraction-sign\">{isNegative ? \"-\" : \"\\t\"}</div> */}\n        {/* Displays the numerator and denominator */}\n        <div className=\"fraction-body-wrapper\">\n            <div className={classNames(\"fraction-body\", { \"negative\": isNegative })}>\n                <span className=\"number numerator\">\n                    {numerator}\n                </span>\n                <hr className=\"bar\" />\n                <span className=\"number denominator\">\n                    {denominator}\n                </span>\n            </div>\n        </div>\n        {/* <div className=\"fraction-sign\"></div> */}\n        {/* Closing parenthesis, if specified */}\n        {parens && <span className=\"paren fullheight\">)</span>}\n    </div>\n))\n","import { Fraction, Nullable } from \"../../lib\"\nimport { FractionInputMode, RawFractionInput } from \"./types\"\n\nconst VALID_INT_REGEX = /^-?[0-9]+$/\nconst VALID_POSITIVE_INT_REGEX = /^[0-9]+$/\n\n/**\n * User numerator/denominator input check. Both must be ints, denominator must\n * be strictly positive.\n *\n * @private exported for testing\n *\n * @param n numerator value from input field.\n * @param d denominator value from input field.\n *\n * @returns an error message if invalid and a falsy value if valid\n */\nexport const invalidFrac = (n: string, d: string): string | false =>\n    (!n.length\n        && \"Answer is incomplete\") ||\n    (!d.length\n        && \"Answer is incomplete\") ||\n    (!VALID_INT_REGEX.test(n)\n        && \"Numerator must be a whole number\") ||\n    (!VALID_POSITIVE_INT_REGEX.test(d)\n        && \"Denominator must be a strictly positive whole number\") ||\n    ((d as unknown) == 0 // Better than 'd === \"0\"' cuz \"000\" is still 0.\n        && \"Denominator cannot be zero\")\n\nexport const userInputToFraction = (\n    numerator: string,\n    denominator: string\n): Fraction | string => (\n    invalidFrac(numerator, denominator) ||\n    new Fraction(Number.parseInt(numerator), Number.parseInt(denominator))\n)\n\n\ntype GetDisplayModeArgs = {\n    isDone: boolean\n    isCorrect: boolean\n    userSolution: Nullable<Fraction> | RawFractionInput\n}\n\n/**\n * Computes the appropriate FractionInput display mode from a subset of\n * worksheet state.\n *\n * @param args\n */\nexport const getDisplayMode = (\n    { isDone, isCorrect, userSolution }: GetDisplayModeArgs\n): FractionInputMode  => {\n    if (!isDone) {\n        return \"input\"\n    } else if (isCorrect) {\n        return \"correct\"\n    }\n\n    if (userSolution instanceof Array) {\n        const f = userInputToFraction(...userSolution)\n        return typeof f === \"string\" ? \"incomplete\": \"incorrect\"\n    } else {\n        return userSolution ? \"incorrect\": \"incomplete\"\n    }\n}\n","/* eslint-disable capitalized-comments */\n\nimport React, {\n    CSSProperties,\n    FC,\n    FormEventHandler,\n    InputHTMLAttributes,\n} from \"react\"\n// import Debug from \"debug\"\nimport { FractionBase } from \"./Fraction\"\nimport { FractionInputEventHandler, FractionInputMode } from \"./types\"\n\nimport \"./FractionInput.scss\"\n\n// const debug = Debug(\"frac:view:FractionInput\")\n\nexport interface FractionInputProps {\n\n    /** Callback that is called when the user inputs a new valid Fraction value. */\n    onChange: FractionInputEventHandler\n\n    /**\n     * Current display and input mode. Defaults to `\"input\"`.\n     *\n     * @default \"input\"\n     * @see FractionInputMode\n     */\n    mode?: FractionInputMode\n    numerator: string\n    denominator: string\n}\n\n/**\n * A custom input component that looks like a fraction.\n *\n * Behavior is controlled by the `mode` prop. When `mode` is `\"input\"`, this\n * component accepts answers from the user, which are passed up via the\n * `onChange` event handler. `\"correct\"` and `\"incorrect\"` are display modes.\n * When in one of these modes, a provided `display` fraction is shown and the\n * component enters a read-only state. Note that providing a `display` value\n * when in `\"input\"` mode has no effect.\n *\n * @param props\n */\nexport const FractionInput: FC<FractionInputProps> = ({\n    onChange,\n    mode = \"input\",\n    numerator,\n    denominator,\n}) => {\n\n    /** Is `mode` a display mode? */\n    const readonly = !(mode === \"input\")\n\n    /** Is `mode` a display mode and do the input fields have populated values? */\n    const filled = mode === \"correct\" || mode === \"incorrect\"\n    const updateValue: (field: \"numerator\" | \"denominator\") => FormEventHandler<HTMLInputElement> =\n        field => e => onChange(field, e.currentTarget.value)\n\n    // Make both input boxes have the same width. Use the largest one, but no\n    // Smaller than 1 character\n    const style: CSSProperties = {\n        width: `${Math.max(numerator?.length ?? 0, denominator?.length ?? 0, 1)}ch`,\n        ...(filled\n            ? { backgroundColor: \"#282c34\", borderStyle: \"hidden\" }\n            : {}),\n    }\n    const commonInputProps: InputHTMLAttributes<HTMLInputElement> = {\n        style,\n        type:            \"text\",\n        pattern:         \"^-?[0-9]*$\",\n        disabled:        readonly,\n        \"aria-disabled\": readonly,\n    }\n\n    return (\n        <FractionBase\n            className={mode}\n            isNegative={false}\n            numerator={\n                <input\n                    name=\"numerator\"\n                    onInput={updateValue(\"numerator\")}\n                    title={\"numerator\"}\n                    value={numerator}\n                    {...commonInputProps}\n                ></input>\n            }\n            denominator={\n                <input\n                    name=\"denominator\"\n                    onInput={updateValue(\"denominator\")}\n                    title={\"denominator\"}\n                    value={denominator}\n                    {...commonInputProps}\n                ></input>\n            }\n        />\n    )\n}\n","import {\n    createSlice,\n    PayloadAction,\n} from \"@reduxjs/toolkit\"\nimport { Operation, Strategies, QuestionGenerationConfig } from \"../lib\"\n\n/**\n * Initial state object for question slice\n */\nconst initialState: QuestionGenerationConfig = {\n    operations:     [Operation.Addition],\n    negative:       false,\n    range:          [1, 10],\n    countRange:     [2, 3],\n    strategy:       \"default\",\n    mixedFractions: false,\n}\n\nconst questionConfig = createSlice({\n    name:     \"questionConfig\",\n    initialState,\n    reducers: {\n\n        /**\n         * Adds an operation to the list of possible question types.\n         *\n         * @param state\n         * @param action\n         */\n        addOperation(state, action: PayloadAction<Operation>) {\n            !(state.operations) && (state.operations = [])\n\n            if (!state.operations.includes(action.payload)) {\n                state.operations?.push(action.payload)\n            }\n        },\n\n        /**\n         * Removes an operation to the list of possible question types.\n         *\n         * @param state\n         * @param action\n         */\n        removeOperation(state, action: PayloadAction<Operation>) {\n            !(state.operations) && (state.operations = [])\n            state.operations = state.operations.filter(el => el !== action.payload)\n        },\n\n        /**\n         * Updates the range of possible numerator/denominator values.\n         *\n         * @param state\n         * @param action\n         */\n        setValueRange(state, action: PayloadAction<[min: number, max: number]>) {\n            state.range = action.payload\n        },\n\n        setStrategy(state, action: PayloadAction<Strategies>) {\n            state.strategy = action.payload\n        },\n\n        setMixedFractions(state, action: PayloadAction<boolean>) {\n            state.mixedFractions = action.payload\n        },\n    },\n})\n\n// Export default questionConfig\nexport const {\n    addOperation,\n    removeOperation,\n    setValueRange,\n    setStrategy,\n    setMixedFractions,\n} = questionConfig.actions\nexport default questionConfig.reducer\n","/* eslint-disable max-len */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { Question, raise } from \"../lib\"\n\n\n/**\n * State for a single question\n */\n// export type QuestionState = [question: Question, answer: Fraction | null]\nexport type QuestionState = {\n    question: Question\n\n    /** The user-provided answer. Not the \"correct\" solution. */\n    answer: [n: string, d: string]\n}\nexport interface WorksheetState {\n\n    /**\n     * Array of question/answer data.\n     *\n     * Each element contains a question being displayed and the user's answer.\n     * If they have not yet answered the question, answer is undefined.\n     */\n    questions: QuestionState[],\n    isDone: boolean,\n}\n\nconst initialState: WorksheetState = {\n    questions: [],\n    isDone:    false,\n}\n\nconst worksheet = createSlice({\n    name:     \"worksheet\",\n    initialState,\n    reducers: {\n\n        /**\n         * Resets the worksheet. Completed worksheets in the done state will\n         * transition to a not done state.\n         */\n        clearQuestions: () => initialState,\n\n        /**\n         * Populates the questions list with a clean set of questions.\n         *\n         * @param state\n         * @param action\n         *\n         * @throws if the worksheet has already been completed (i.e. `isDone === true`)\n         */\n        setQuestions: (state, action: PayloadAction<Question[]>) => (\n            state.isDone && raise(\"Cannot set questions, the worksheet has already been completed.\"),\n            {\n                ...state,\n                questions: action.payload.map(\n                    question => ({ question, answer: [\"\", \"\"] })\n                ),\n            }),\n\n        /**\n         * Sets the user's answer to a specific question.\n         */\n        answerQuestion: {\n\n            /**\n             *\n             * @param i             The question number\n             * @param numerator     The answer's numerator\n             * @param denominator   The answer's denominator\n             */\n            prepare: (i: number, numerator: string, denominator: string) => ({\n                payload: { i, answer: [numerator, denominator] as [string, string] },\n            }),\n            reducer: (\n                state,\n                {\n                    payload: { i, answer },\n                }: PayloadAction<{ i: number, answer: [n: string, d: string] }>\n            ) => (\n                // Throw if worksheet is finished or question number is out of bounds\n                state.isDone && raise(`Cannot answer question #${i}, the worksheet has already been completed.`),\n                !state.questions.length && raise(\"List of questions is empty\"),\n                state.questions.length <= i && raise(`Question #${i} does not exist and is out of bounds`),\n                // Set answer for question i\n                state.questions[i].answer = answer,\n                state\n            ),\n        },\n\n        /**\n         * Marks the worksheet as complete.\n         *\n         * When in a done state, questions and answers may not be modified.\n         * Attempting to do so will throw an error. The worksheet state must\n         * be cleared before questions may be updated again.\n         *\n         * @param state\n         *\n         * @see clearQuestions\n         */\n        setDone: (state) => {\n            state.isDone = true\n        },\n    },\n})\n\nexport const {\n    clearQuestions,\n    setQuestions,\n    answerQuestion,\n    setDone,\n} = worksheet.actions\nexport default worksheet.reducer\n","import { Middleware } from \"redux\"\nimport Debug from \"debug\"\n\nconst debug = Debug(\"frac:state:middleware\")\n\nexport const logger: Middleware = store => next => action => {\n    debug(\"dispatching action '%s': %O\", action.type, action)\n    const result = next(action)\n    debug(\"next state: %O\", store.getState())\n\n    return result\n}\n\nexport const crashReporter: Middleware = store => next => action => {\n    try {\n        return next(action)\n    } catch (err) {\n        debug(\"State at error: %O\", store.getState())\n        err.state = store\n\n        throw err\n    }\n}\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\n\n// eslint-disable-next-line\nimport { QuestionGenerationConfig } from \"../lib\"\nimport questionConfig from \"./questions.config\"\nimport worksheet from \"./questions\"\nimport { logger, crashReporter } from \"./middleware\"\n\n/** The root reducer */\nconst reducer = combineReducers({\n\n    /**\n     * User settings that configure how questions and fractions are\n     * generated. Includes things like how many questions to generate per\n     * worksheet, what operations are present in each question, etc.\n     *\n     * @see QuestionGenerationConfig\n     */\n    questionConfig,\n\n    /**\n     * Active worksheet state. Includes list of current questions, etc.\n     *\n     * @see WorksheetState\n     */\n    worksheet,\n})\n\n/** The application's Redux store. */\nconst store = configureStore({\n    reducer,\n    middleware: defaults => defaults({\n        serializableCheck: false, // TODO(don): Probably shouldn't do this, but we need to store fractions ¯\\_(ツ)_/¯\n    }).concat(logger, crashReporter),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport default store\n","import Debug from \"debug\"\nimport { generateQuestion, Question } from \"../lib\"\nimport { setQuestions } from \"./questions\"\nimport store from \"./store\"\n\nconst debug = Debug(\"frac:state:dispatch\")\n\n/**\n * Generates a random set of questions using the user's question generation\n * settings.\n *\n * @param num the number of questions to generate\n *\n * @see generateQuestion\n */\nexport const generateQuestions = (num: number): void => {\n    debug(\"generating %d questions\", num)\n    const questions: Question[] = []\n    const { questionConfig } = store.getState()\n\n    for (let i = 0; i < num; i++) {\n        questions.push(generateQuestion(questionConfig))\n    }\n\n    store.dispatch(setQuestions(questions))\n}\n","import store from \"./store\"\n\nexport * from \"./store\"\nexport * from \"./questions.config\"\nexport * from \"./questions\"\nexport * as dispatchers from \"./dispatchers\"\n\nexport default store\n","import React, { ButtonHTMLAttributes } from \"react\"\nimport \"./Button.scss\"\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary?: boolean;\n\n  /**\n   * What background color to use\n   */\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  size?: \"small\" | \"medium\" | \"large\";\n\n  /**\n   * Button contents. Ignored if children are provided\n   */\n  label?: string;\n\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n}\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button: React.FC<ButtonProps> = ({\n    primary = false,\n    size = \"medium\",\n    type = \"button\",\n    backgroundColor,\n    label,\n    children,\n    ...props\n}) => {\n    const mode = primary ? \"primary\" : \"secondary\"\n    return (\n        <button\n            type={type}\n            className={[\"storybook-button\", size, mode].join(\" \")}\n            style={{ backgroundColor }}\n            {...props}\n        >\n            {children ?? label ?? \"\"}\n        </button>\n    )\n}\n","import { FC } from \"react\"\nimport classNames from \"classnames\"\nimport { Fraction, Question } from \"../../lib\"\nimport { FractionComponent } from \"../fraction\"\nimport { symbolFor } from \"../../lib/util\"\n\nimport \"./Question.scss\"\n\nexport interface QuestionBodyProps {\n\n    /**\n     * The question being displayed\n     */\n    question: Question\n}\n\n/**\n * Displays question information common across all question archetypes. In an\n * equation, this is the left-hand side.\n *\n * @param props the component's props\n *\n * @see QuestionBodyProps\n */\nexport const QuestionBody: FC<QuestionBodyProps> = ({ question, children }) => (\n    <div className=\"question\">\n        <QuestionNode question={question} />\n        {children}\n    </div>\n)\n\nconst QuestionNode: FC<QuestionBodyProps> = ({ question }) => {\n    if (question instanceof Fraction) {\n        return <FractionComponent frac={question} />\n    }\n\n    const { left, right, operation } = question\n\n    return (\n        <>\n            <FractionComponent frac={left} />\n            <span className={classNames(\"operation\", operation)}>{symbolFor(operation)}</span>\n            <QuestionNode question={right} />\n        </>\n    )\n}\n","import React, { FC, useMemo } from \"react\"\nimport {\n    shallowEqual,\n    useDispatch,\n    useSelector\n} from \"react-redux\"\nimport { BsCheck, BsExclamationTriangle, BsXCircle } from \"react-icons/bs\"\nimport { Question, solveQuestion } from \"../../lib\"\nimport { answerQuestion, QuestionState, RootState } from \"../../state\"\nimport {\n    FractionInput,\n    FractionInputProps,\n    FractionInputEventHandler,\n    getDisplayMode,\n    userInputToFraction,\n    FractionInputMode\n} from \"../fraction\"\nimport { QuestionBody } from \"./QuestionBody\"\nimport { IconBaseProps } from \"react-icons\"\nimport classNames from \"classnames\"\n\nconst QuestionModeIcon: FC<{ mode: FractionInputMode } & IconBaseProps> =\n    ({ mode, ...props }) => {\n        switch(mode) {\n            case \"input\":      return null\n            case \"correct\":    return <BsCheck {...props} />\n            case \"incorrect\":  return <BsXCircle {...props} />\n            case \"incomplete\": return <BsExclamationTriangle {...props} />\n        }\n    }\n\n// const modeToIcon: Record<FractionInputMode, Nullable<JSX.Element>> = {\n//     \"input\":      null,\n//     \"correct\":    <BsCheck />,\n//     \"incorrect\":  <BsXCircle />,\n//     \"incomplete\": <BsExclamationTriangle />,\n\n// }\nexport interface FillBlanksQuestionProps {\n    question: Question\n    isDone: boolean\n    onChange: FractionInputEventHandler\n    numerator: string\n    denominator: string\n    questionNum?: number\n}\n\n/**\n * Displays a \"fill in the blanks\" question. The user is prompted with a fraction\n * input where they may type in their solution.\n *\n * @param props\n *\n * @see QuestionBody\n * @see FractionInput\n */\nexport const FillBlanksQuestion: FC<FillBlanksQuestionProps> = ({\n    question,\n    isDone,\n    numerator,\n    denominator,\n    questionNum,\n    ...rest\n}) => {\n    // Calculate correct answer to question\n    const solution = useMemo(() => solveQuestion(question), [question])\n    // Check user answer against solution\n    const isCorrect = useMemo(\n        () => {\n\n            const f = userInputToFraction(numerator, denominator)\n            // Strings mean error messages -> incorrect\n            return typeof f !== \"string\" && f.eq(solution)\n        },\n        [numerator, denominator, solution]\n    )\n    // Derive mode from above checks + worksheet state\n    const mode = useMemo(\n        () => getDisplayMode({\n            isDone,\n            isCorrect,\n            userSolution: [numerator, denominator],\n        }),\n        [isDone, isCorrect, numerator, denominator]\n    )\n    // Pack it all up, send it down\n    const props: FractionInputProps = {\n        mode,\n        numerator,\n        denominator,\n        ...rest,\n    }\n\n    return (\n        <>\n            {questionNum != null &&\n                <span className=\"question-number\">\n                    {(questionNum + 1) + \".\"}\n                    &nbsp;\n                    <QuestionModeIcon mode={mode} className={classNames(\"icon\", mode)} />\n                </span>\n            }\n            <span className=\"question-wrapper\">\n                <QuestionBody question={question}>\n                    <span className=\"operation\">=</span>\n                    <FractionInput {...props} />\n                </QuestionBody>\n            </span>\n        </>\n    )\n}\n\nexport interface ConnectedFillBlanksQuestionProps {\n    questionNum: number\n}\n\nexport const ConnectedFillBlanksQuestion: FC<ConnectedFillBlanksQuestionProps> = ({\n    questionNum,\n}) => {\n    const dispatch = useDispatch()\n    const {\n        question,\n        answer: [numerator = \"\", denominator = \"\"],\n    } = useSelector<RootState, QuestionState>(\n        state => state.worksheet.questions[questionNum],\n        shallowEqual\n    )\n\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n    const onAnswerChange: FractionInputEventHandler = (field, val) => {\n        if(field === \"numerator\") {\n            dispatch(answerQuestion(questionNum, val, denominator))\n        } else {\n            dispatch(answerQuestion(questionNum, numerator, val))\n        }\n    }\n\n    const props: FillBlanksQuestionProps = {\n        onChange: onAnswerChange,\n        question,\n        isDone,\n        numerator,\n        denominator,\n        questionNum,\n    }\n    return <FillBlanksQuestion {...props} />\n}\n","import React, { FC } from \"react\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\n\nimport {\n    RootState,\n    setDone,\n    clearQuestions,\n} from \"../../state\"\nimport { Button } from \"../button/Button\"\n\nimport \"./FlowWorksheet.scss\"\nimport { generateQuestions } from \"../../state/dispatchers\"\nimport { ConnectedFillBlanksQuestion } from \"../question/FillBlanksQuestion\"\nimport { times } from \"ramda\"\nimport { BsArrowClockwise, BsCheckCircle } from \"react-icons/bs\"\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlowWorksheetProps { }\n\n/**\n * A fractions worksheet with a responsive layout. Questions are displayed in a\n * grid that changes dimensions depending on the client's viewport size. This\n * worksheet is meant to be used on a browser, not printed.\n *\n * @param props Component props\n */\nexport const FlowWorksheet: FC<FlowWorksheetProps> = () => {\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n    const numQuestions = useSelector<RootState, number>(\n        state => state.worksheet.questions.length,\n        shallowEqual\n    )\n    const dispatch = useDispatch()\n    const finishWorksheet = () => dispatch(setDone())\n    const resetWorksheet = () => {\n        dispatch(clearQuestions())\n        generateQuestions(24)\n    }\n    return (\n        <form className=\"worksheet container\">\n            <div className=\"grid row\" role=\"list\">\n                {times(\n                    i => (\n                        <div\n                            key={i}\n                            className=\"col-12 col-sm-6 col-md-4 col-xxl-2\"\n                            role=\"listitem\"\n                        >\n                            <ConnectedFillBlanksQuestion questionNum={i} />\n                        </div>\n                    ),\n                    numQuestions\n                )}\n            </div>\n            <div className=\"buttons\">\n                {!isDone &&\n                <Button\n                    type=\"button\"\n                    role=\"submit\"\n                    primary\n                    onClick={finishWorksheet}\n                >\n                    <BsCheckCircle /> Finish\n                </Button>\n                }\n                <Button\n                    type=\"button\"\n                    role=\"reset\"\n                    primary={isDone}\n                    onClick={resetWorksheet}\n                >\n                    <BsArrowClockwise /> Reset\n                </Button>\n            </div>\n        </form>\n    )\n}\n","import React, { FC } from \"react\"\n// import { BrowserRouter as Router, Link } from \"react-router-dom\"\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport logo from \"./logo.svg\"\nimport \"./App.scss\"\nimport { FlowWorksheet } from \"./page/FlowWorksheet\"\nimport { dispatchers } from \"../state\"\n\nconst App: FC = () => {\n    dispatchers.generateQuestions(24)\n    return (\n        <div className=\"App\">\n            <FlowWorksheet />\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport Debug from \"debug\"\n\nimport App from \"./components/App\"\nimport store from \"./state\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nimport \"./index.css\"\n\n// Namespaces need to be manually enabled because webpack weirdness\nconst namespaces = process.env.DEBUG || (\n    process.env.NODE_ENV === \"production\"\n        ? \"\"\n        : \"frac:*\"\n)\n\nDebug.enable(namespaces)\nDebug.log = console.info.bind(console)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// To log results (for example: reportWebVitals(console.log))\n// Or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// ReportWebVitals(console.log)\nreportWebVitals()\n"],"sourceRoot":""}
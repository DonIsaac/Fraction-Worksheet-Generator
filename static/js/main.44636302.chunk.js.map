{"version":3,"sources":["lib/fractions/fraction.gen.ts","lib/fractions/fraction.ts","lib/questions/question.gen.ts","lib/questions/question.ts","lib/util.ts","lib/types.ts","components/fraction/index.ts","components/fraction/FractionBase.tsx","components/fraction/util.ts","components/fraction/fraction-display/FractionDisplay.tsx","components/fraction/fraction-input/FractionInput.tsx","state/questions.config.ts","state/questions.ts","state/middleware.ts","state/store.ts","state/dispatchers.ts","state/index.ts","components/button/Button.tsx","components/question/QuestionBody.tsx","components/question/FillBlanksQuestion.tsx","components/page/worksheet/FlowWorksheet.tsx","components/page/footer/Footer.tsx","components/page/header/Header.tsx","components/page/settings/FormComponents.tsx","components/page/settings/SettingsForm.tsx","components/modal/Modal.tsx","components/boundary/ErrorBoundary.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["gen","Fraction","numerator","denominator","isNegative","equals","this","eq","Number","isInteger","RangeError","Error","Math","abs","num","isNeg","floatToInt","simplify","other","strictEq","divisor","gcd","denom","lcm","s1","s2","sign","neg","mult","reciprocal","generators","min","max","randomInt","negative","range","mixedFractions","generateQuestion","operations","Operation","Addition","strategy","countRange","_genQuestion","operation","length","count","args","rest","random","left","right","solveQuestion","q","opts","add","Subtraction","sub","Multiplication","Division","div","a","b","scale","MAX_VALUE","floor","raise","err","captureStackTrace","symbolFor","op","FractionBase","React","forwardRef","ref","parens","className","classNames","role","aria-label","VALID_INT_REGEX","VALID_POSITIVE_INT_REGEX","userInputToFraction","d","n","test","parseInt","getDisplayMode","isDone","isCorrect","userSolution","Array","FractionDisplay","frac","FractionInput","onChange","mode","readonly","filled","updateValue","field","e","currentTarget","value","commonInputProps","style","width","backgroundColor","borderStyle","type","pattern","disabled","name","onInput","title","initialState","questionConfig","createSlice","reducers","reset","addOperation","state","action","includes","payload","push","removeOperation","filter","el","setValueRange","setValueMin","setValueMax","setStrategy","setMixedFractions","setNegatives","actions","questions","worksheet","clearQuestions","setQuestions","map","question","answer","answerQuestion","prepare","i","reducer","setDone","debug","Debug","logger","store","next","result","getState","crashReporter","combineReducers","configureStore","middleware","defaults","serializableCheck","concat","generateQuestions","dispatch","Button","primary","size","label","children","props","QuestionBody","QuestionNode","QuestionModeIcon","FillBlanksQuestion","questionNum","solution","useMemo","f","ConnectedFillBlanksQuestion","useDispatch","useSelector","shallowEqual","val","FlowWorksheet","numQuestions","times","onClick","Footer","href","target","rel","Header","CheckboxInput","id","checked","NumberInput","SettingsForm","onDone","valueMin","valueMax","htmlFor","OperationsInputGroup","Object","keys","opName","toLowerCase","display","modalVariants","open","opacity","transition","closed","delay","bodyVariants","Modal","onClose","visible","handleKeyPress","key","useEffect","document","addEventListener","motion","animate","initial","variants","stopPropagation","ErrorBoundary","hasError","error","errorInfo","console","Component","App","useState","modalVisible","setModalVisible","questionsGenerated","setQuestionsGenerated","dispatchers","hideModal","linkName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","namespaces","process","DEBUG","enable","log","info","bind","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.44636302.chunk.js","sourcesContent":["import { Fraction } from \"../fractions/fraction\"\nimport { randomInt } from \"../util\"\nimport { Strategies, FractionGenerator, FractionGeneratorFactory } from \"../types\"\n\n/**\n * Maximum scale factor for mixed fractions. The actual scalar multiplied to\n * the generated numerator value is `[1, MIXED_FRAC_SCALAR)`.\n */\nconst MIXED_FRAC_SCALAR = 3\n\n/**\n * Creates a random `Fraction`. The `Fraction` created may be constrained by\n * various options.\n *\n * Options:\n * - `negative`: `true` to make the fraction negative, `false` otherwise.\n * - `range`: min, max values the numerator, denominator may take.\n * - `mixedFractions`: result may be (but is not guaranteed to be) a mixed\n *   fraction.\n * @param gen the number generator used to create the numerator and denominator\n *            values\n *\n * @see Fraction\n */\nexport const generateFraction: FractionGeneratorFactory = gen => ({\n    negative,\n    range,\n    mixedFractions,\n}) => {\n    // Generate a random denominator value\n    const denominator = gen(range)\n    // Generate a random numerator value. Use random scalar to increase value if\n    // Mixed values are desired\n    const numerator = gen(range) * (mixedFractions\n        ? randomInt(1, MIXED_FRAC_SCALAR)\n        : 1)\n    // Random sign if negatives are enabled false otherwise\n    // Const isNeg = negative && Math.random() < 0.5\n\n    return new Fraction(numerator, denominator, negative)\n}\n\nexport const generators: Record<Strategies, FractionGenerator> = {\n    \"default\": generateFraction(([min, max]) => randomInt(min, max)),\n}\n\n/*\nExport const generateFraction: FractionGeneratorFactory = (denom: () => number) => (\n    digitCount: number,\n    sign: boolean = Math.random() < 0.5\n): Fraction => {\n    const min = 10 ** (digitCount - 1)\n    const max = 10 ** digitCount\n    const numerator = randomInt(min, max)\n    const denominator = randomInt(min, max)\n\n    return new Fraction(numerator, denominator, sign)\n}\n*/\n","import { floatToInt, gcd, lcm } from \"../util\"\n\nexport class Fraction {\n\n    /**\n     * Creates a fraction from a decimal number. The fraction will be automatically\n     * simplified.\n     *\n     * @param num\n     */\n    public static fromDecimal(num: number): Fraction {\n        const isNeg = num < 0\n        if (isNeg) num *= -1\n        const [n, d] = floatToInt(num)\n\n        return new Fraction(n, d, isNeg).simplify()\n    }\n\n    public readonly numerator: number\n    public readonly denominator: number\n    public readonly isNegative: boolean\n\n    /**\n     * Creates a new `Fraction`.\n     *\n     * @param numerator     The fraction's numerator. Must be positive.\n     * @param denominator   The fraction's denominator. Cannot be zero.\n     * @param isNegative    `true` to make the fraction negative, `false` to make it positive.\n     */\n    constructor(\n        numerator: number,\n        denominator = 1,\n        isNegative: boolean | null = null\n    ) {\n        if (\n            !Number.isInteger(numerator)\n        ) {\n            throw new RangeError(\n                `Illegal numerator ${numerator}: must be a ` +\n                \"finite integer greater than or equal to 0\"\n            )\n        }\n        if (numerator < 0 && isNegative === false) {\n            throw new Error(\"Numerator value was negative, but fraction was explicitly declared positive\")\n        }\n\n        if (\n            denominator <= 0 ||\n            !Number.isInteger(denominator)\n        ) {\n            throw new RangeError(\n                `Illegal denominator ${denominator}: must be a ` +\n                \"positive finite integer\"\n            )\n        }\n\n        this.numerator = Math.abs(numerator)\n        this.denominator = denominator\n        this.isNegative = numerator < 0 || !!isNegative\n        // This.simplify()\n    }\n\n    public toDecimal(): number {\n        return (this.isNegative ? -1 : 1) * (this.numerator / this.denominator)\n    }\n\n    /**\n     * Checks if `this` is exactly equal to `other`, regardless if they are\n     * equivalent.\n     *\n     * @param other the fraction to check against.\n     *\n     * @returns `true` if the two fractions are exactly equal, `false` otherwise.\n     */\n    public strictEq(other: Fraction): boolean {\n        // Same object pointer\n        return this === other ||\n            // Both are 0\n            (this.numerator === 0 && other.numerator === 0) ||\n            // Numerator, denominator, and sign are the same\n            (this.numerator === other.numerator &&\n                this.denominator === other.denominator &&\n                this.isNegative === other.isNegative)\n    }\n\n    /**\n     * Checks if `this` is mathematically equal to `other`.\n     *\n     * @param other The fraction to check against.\n     *\n     * @returns `true` if they are equal, `false` otherwise.\n     */\n    public eq(other: Fraction): boolean {\n        // Return this.toDecimial() === other?.toDecimial()\n        if (\n            this === other ||\n            (this.numerator === 0 && other.numerator === 0)\n        ) {\n            return true\n        } else {\n            return this.simplify().strictEq(other.simplify())\n        }\n    }\n\n    /**\n     * Alias to `Fraction#eq()\n     *\n     * @see Fraction.prototype.eq\n     */\n    public equals = this.eq\n\n    public simplify(): Fraction {\n        if (!this.numerator) {\n            return new Fraction(0, this.denominator, false)\n        }\n\n        const divisor = gcd(this.numerator, this.denominator)\n\n        return new Fraction(\n            this.numerator / divisor,\n            this.denominator / divisor,\n            this.isNegative\n        )\n    }\n\n    /**\n     * Adds `this` fraction with `other`.\n     *\n     * @param other\n     */\n    public add(other: Fraction): Fraction {\n        const denom = lcm(this.denominator, other.denominator),\n            s1 = denom / this.denominator,\n            s2 = denom / other.denominator\n\n        const n1 = this.sign * this.numerator * s1,\n            n2 = other.sign * other.numerator * s2\n\n        const numerator = n1 + n2\n        const neg = numerator < 0\n\n        return new Fraction(Math.abs(numerator), denom, neg).simplify()\n    }\n\n    /**\n     * Subtracts `other` from `this`.\n     *\n     * @param other\n     */\n    public sub(other: Fraction): Fraction {\n        const denom = lcm(this.denominator, other.denominator),\n            s1 = denom / this.denominator,\n            s2 = denom / other.denominator\n\n        const n1 = this.sign * this.numerator * s1,\n            n2 = other.sign * other.numerator * s2\n\n        const numerator = n1 - n2\n        const neg = numerator < 0\n\n        return new Fraction(Math.abs(numerator), denom, neg).simplify()\n    }\n\n    /**\n     * Multiplies `this` with `other`.\n     *\n     * @param other\n     */\n    public mult(other: Fraction): Fraction {\n        return new Fraction(\n            this.numerator * other.numerator,\n            this.denominator * other.denominator,\n            this.sign * other.sign < 0\n        ).simplify()\n    }\n\n    /**\n     * Divides `other` from `this`.\n     *\n     * @param other\n     */\n    public div(other: Fraction): Fraction {\n        if (other.numerator === 0) {\n            throw new Error(\"Cannot divide by zero.\")\n        }\n\n        return this.mult(other.reciprocal())\n    }\n\n    /**\n     * Gets the reciprocal of this fraction.\n     *\n     * ```ts\n     * new Fraction(1, 2).reciprocal() // => 2/1\n     * ```\n     */\n    public reciprocal(): Fraction {\n        if (this.numerator === 0) {\n            throw new Error(\"Cannot take reciprocal of zero\")\n        }\n\n        return new Fraction(this.denominator, this.numerator, this.isNegative)\n    }\n\n    public toString(): string {\n        return (this.isNegative ? \"-\" : \"\") +\n            `${this.numerator}/${this.denominator}`\n    }\n\n    private get sign(): number {\n        return this.isNegative ? -1 : 1\n    }\n}\n","import { QuestionGenerationConfig, FractionGenerator, Operation } from \"../types\"\nimport type { Question } from \".\"\nimport { randomInt } from \"../util\"\nimport { Fraction, generators } from \"../fractions\"\n\n/**\n * Creates a random question.\n *\n * @param args fraction and question generation settings\n *\n * @returns a newly created `Question`.\n *\n * @see Question\n */\nexport const generateQuestion: (\n    args?: Partial<QuestionGenerationConfig>\n) => Question = ({ // Arguments are unpacked/repacked to establish defaults\n    operations = [Operation.Addition],\n    strategy = \"default\",\n    negative = false,\n    range = [1, 10] as [number, number],\n    countRange = [2, 3] as [number, number],\n    mixedFractions = false,\n} = {}) => _genQuestion({\n    operation: operations[randomInt(0, operations.length)],\n    negative,\n    range,\n    count:     randomInt(...countRange),\n    gen:       generators[strategy],\n    mixedFractions,\n})\n\ntype GenQuestionArgs = Required<Omit<QuestionGenerationConfig, \"strategy\" | \"countRange\" | \"operations\">> & {\n\n    /** The fraction factory to use */\n    gen: FractionGenerator\n\n    /** The number of fractions in the question */\n    count: number\n\n    /** Arithmetic operation for this question subsection */\n    operation: Operation\n}\nconst _genQuestion: (args: GenQuestionArgs) => Question = args => {\n    const {\n        operation, gen, negative, count, ...rest\n    } = args\n    const isNeg = negative && Math.random() < 0.5\n    const left: Fraction = gen({ negative: isNeg, ...rest })\n\n    return count <= 1\n        ? left\n        : {\n            operation,\n            left,\n            right: _genQuestion({ ...args, count: count - 1 }),\n        } as Question\n}\n","import { Fraction } from \"../fractions\"\nimport { Operation } from \"../types\"\n\n/**\n * A practice problem for the user to solve. Questions are generated by the\n * desired generator function selected by the user.\n *\n * @see FractionGenerator\n */\nexport type Question =\n    | Fraction\n    | {\n        operation: Operation\n        left: Fraction\n        right: Question\n    }\n    ;\n\nexport interface SolveQuestionOpts {\n\n    /** Whether or not to simplify the solution. Defaults to `false`. */\n    simplify?: boolean\n}\n\n/**\n * Calculates the solution to a Question.\n *\n * @param q     the question to solve.\n * @param opts  options to tweak solution behavior\n *\n * @returns     the solution to the Question.\n */\nexport const solveQuestion = (\n    q: Question,\n    opts: SolveQuestionOpts = {}\n): Fraction => {\n    const { simplify = false } = opts\n\n    if (q instanceof Fraction) {\n        return simplify ? q.simplify() : q\n    }\n\n    const { operation , left, right } = q\n\n    switch (operation) {\n        case Operation.Addition:\n            return solveQuestion(left, opts).add(solveQuestion(right, opts))\n        case Operation.Subtraction:\n            return solveQuestion(left, opts).sub(solveQuestion(right, opts))\n        case Operation.Multiplication:\n            return solveQuestion(left, opts).mult(solveQuestion(right, opts))\n        case Operation.Division:\n            return solveQuestion(left, opts).div(solveQuestion(right, opts))\n    }\n}\n","import { Operation } from \"./types\"\n\n/**\n * Finds the greatest common divisor between two numbers\n *\n * @param a\n * @param b\n *\n * @see {@link https://en.wikipedia.org/wiki/Euclidean_algorithm Euclid's Algorithm}\n */\nexport const gcd = (a: number, b: number): number =>\n    b <= 0\n        ? a\n        : gcd(b, a % b)\n\n/**\n * Finds the least common multiple (LCM) for two numbers.\n *\n * @param a\n * @param b\n *\n * @see {@link https://artofproblemsolving.com/wiki/index.php/Least_common_multiple}\n */\nexport const lcm = (a: number, b: number): number => a * b / gcd(a, b)\n\n/**\n * Multiplies a decimal by 10 until it is an integer\n *\n * ```ts\n * floatToInt(1.5) // => [15, 10]\n * floatToInt(7) // => [7, 1]\n * floatToInt(3.14) // => [314, 100]\n * ```\n * @param num\n * @param scale Used for recursive calls. Do not use this.\n */\nexport const floatToInt = (num: number, scale = 1): [number, number] =>\n    Number.isInteger(num) && (num < Number.MAX_VALUE / 100)\n        ? [num, scale]\n        : floatToInt(num * 10, scale * 10)\n\n/**\n * Generates a random integer between `min` (inclusive) and `max` (exclusive).\n *\n * @param min G\n * @param max\n *\n * @throws if `max` is not strictly greater than `min`\n * @returns the generated int\n */\nexport const randomInt = (min: number, max: number): number =>\n    max > min\n        ? Math.floor(Math.random() * (max - min)) + min\n        : raise(new RangeError(\"Range max must be greater than the min\"))\n\n\n/**\n * Calls a function a certain number of times\n * @param n the number of iterations\n */\nexport const times = (n: number) => <T>(fn: (i: number) => T): T[] => (\n    n = Math.max(n, 0),\n    Array(n).fill(n).map((_, i) => fn(i))\n)\n\n/**\n * Throws an error.\n *\n * @param err The error to throw, or an error message (which is passed to a new Error)\n */\nexport const raise = (err: Error | string): never => {\n    if (typeof err === \"string\") {\n        err = new Error(err)\n        // Don't include throws() in the stack trace\n        Error.captureStackTrace(err, raise)\n    }\n\n    throw err\n}\n\nexport const symbolFor = (op: Operation): string => {\n    switch (op) {\n        case Operation.Addition: return \"+\"\n        case Operation.Subtraction: return \"-\"\n        case Operation.Multiplication: return \"\\u00d7\"\n        case Operation.Division: return \"\\u00f7\"\n    }\n}\n\n/**\n * Zips two arrays into one array where each element is a pair of values from the\n * first and the second arrays. Only supposed to be called on arrays of equal length.\n *\n * @param a first array\n * @param b second array\n * @returns array of pairs of values from the two arrays\n */\nexport const zip = <A, B>(a: A[], b: B[]): [A, B][] => a.map((a, i) => [a, b[i]])\n","import type { Fraction } from \"./fractions\"\n\n/**\n * Configuration settings set by the user and passed to question generators.\n *\n * @see Question\n * @see FractionGenerator\n */\nexport interface QuestionGenerationConfig {\n\n    /**\n     * Possible operations that questions may use.\n     *\n     * @default [Operation.Addition]\n     */\n    operations: Operation[]\n\n    /**\n     * If false, neither the fractions in question or in the answer should\n     * be negative\n     *\n     * @default false\n     */\n    negative?: boolean;\n\n    /**\n     * Range of number values that may appear in numerator/denominator.\n     *\n     * @default [1,10]\n     */\n    range?: [min: number, max: number]\n\n    /**\n     * [min, max] number of fractions that may appear in each problem\n     *\n     * @default [2,3]\n     */\n    countRange?: [min: number, max: number]\n\n    /**\n     * Question generation strategy.\n     *\n     * @default \"default\"\n     */\n    strategy?: Strategies\n\n    /**\n     * Whether questions will include mixed fractions. If `false`, all\n     * fraction numerators will be less than or equal to their denominators.\n     *\n     * @default false\n     */\n    mixedFractions?: boolean\n\n}\n\n/**\n * Available operations in questions.\n *\n * @see Question\n */\nexport enum Operation {\n    Addition = \"add\",\n    Subtraction = \"sub\",\n    Multiplication = \"mult\",\n    Division = \"div\"\n}\n\nexport type NumGenArgs = [range: [number, number]]\n\n/**\n * A function that creates a random fraction.\n */\nexport type FractionGenerator = (\n    config: Required<Pick<QuestionGenerationConfig, \"negative\" | \"range\" | \"mixedFractions\">>\n) => Fraction\n\n/**\n * Factory function for fraction generators.\n *\n * @see FractionGenerator\n */\nexport type FractionGeneratorFactory<T extends any[] = NumGenArgs> = (\n    gen: (...args: T) => number\n) => FractionGenerator\nexport type Strategies = \"default\"\n\n/** Lets `T` be nullish. */\nexport type Nullable<T> = T | null | undefined\n","export { FractionDisplay as FractionComponent } from \"./fraction-display/FractionDisplay\"\nexport { FractionInput } from \"./fraction-input/FractionInput\"\n// Needed by question components\nexport { getDisplayMode, userInputToFraction } from \"./util\"\n\n// Types are exported seperately because of --isolatedModules flag\nexport * from \"./types\"\nexport type { FractionDisplayProps as FractionComponentProps } from \"./fraction-display/FractionDisplay\"\nexport type { FractionInputProps } from \"./fraction-input/FractionInput\"\n","import React from \"react\"\nimport classNames from \"classnames\"\n\nimport \"./FractionBase.scss\"\n\nexport type FractionBaseProps = {\n    parens?: boolean\n    numerator: number | string | JSX.Element\n    denominator: number | string | JSX.Element\n    isNegative: boolean\n    className?: string | string[]\n}\nexport const FractionBase = React.forwardRef<\n    HTMLDivElement,\n    FractionBaseProps\n>(({\n    parens = false,\n    numerator,\n    denominator,\n    isNegative,\n    className,\n}, ref) => (\n    <div\n        className={classNames(\"fraction\", className)}\n        ref={ref}\n        role=\"math\"\n        aria-label={`${isNegative ? \"-\" : \"\"}${numerator}/${denominator}`}\n    >\n        {/* Open parenthesis, if specified */}\n        {parens && <span className=\"paren fullheight\">(</span>}\n        {/* Sign */}\n        {isNegative && <span className=\"fraction-sign\">-</span>}\n        {/* <div className=\"fraction-sign\">{isNegative ? \"-\" : \"\\t\"}</div> */}\n        {/* Displays the numerator and denominator */}\n        <div className=\"fraction-body-wrapper\">\n            <div className={classNames(\"fraction-body\", { \"negative\": isNegative })}>\n                <span className=\"number numerator\">\n                    {numerator}\n                </span>\n                <hr className=\"bar\" />\n                <span className=\"number denominator\">\n                    {denominator}\n                </span>\n            </div>\n        </div>\n        {/* <div className=\"fraction-sign\"></div> */}\n        {/* Closing parenthesis, if specified */}\n        {parens && <span className=\"paren fullheight\">)</span>}\n    </div>\n))\n","import { Fraction, Nullable } from \"../../lib\"\nimport { FractionInputMode, RawFractionInput } from \"./types\"\n\nconst VALID_INT_REGEX = /^-?[0-9]+$/\nconst VALID_POSITIVE_INT_REGEX = /^[0-9]+$/\n\n/**\n * User numerator/denominator input check. Both must be ints, denominator must\n * be strictly positive.\n *\n * @private exported for testing\n *\n * @param n numerator value from input field.\n * @param d denominator value from input field.\n *\n * @returns an error message if invalid and a falsy value if valid\n */\nexport const invalidFrac = (n: string, d: string): string | false =>\n    (!n.length\n        && \"Answer is incomplete\") ||\n    (!d.length\n        && \"Answer is incomplete\") ||\n    (!VALID_INT_REGEX.test(n)\n        && \"Numerator must be a whole number\") ||\n    (!VALID_POSITIVE_INT_REGEX.test(d)\n        && \"Denominator must be a strictly positive whole number\") ||\n    ((d as unknown) == 0 // Better than 'd === \"0\"' cuz \"000\" is still 0.\n        && \"Denominator cannot be zero\")\n\nexport const userInputToFraction = (\n    numerator: string,\n    denominator: string\n): Fraction | string => (\n    invalidFrac(numerator, denominator) ||\n    new Fraction(Number.parseInt(numerator), Number.parseInt(denominator))\n)\n\n\ntype GetDisplayModeArgs = {\n    isDone: boolean\n    isCorrect: boolean\n    userSolution: Nullable<Fraction> | RawFractionInput\n}\n\n/**\n * Computes the appropriate FractionInput display mode from a subset of\n * worksheet state.\n *\n * @param args\n */\nexport const getDisplayMode = (\n    { isDone, isCorrect, userSolution }: GetDisplayModeArgs\n): FractionInputMode  => {\n    if (!isDone) {\n        return \"input\"\n    } else if (isCorrect) {\n        return \"correct\"\n    }\n\n    if (userSolution instanceof Array) {\n        const f = userInputToFraction(...userSolution)\n        return typeof f === \"string\" ? \"incomplete\": \"incorrect\"\n    } else {\n        return userSolution ? \"incorrect\": \"incomplete\"\n    }\n}\n","import React, { FC } from \"react\"\nimport { Fraction } from \"../../../lib\"\nimport { FractionBase } from \"../FractionBase\"\n// import \"./Fraction.scss\"\n\nexport interface FractionDisplayProps {\n    frac: Fraction\n    parens?: boolean\n}\n\n/**\n * Displays an existing Function.\n *\n * @param props\n *\n * @see Function\n */\nexport const FractionDisplay: FC<FractionDisplayProps> = ({\n    parens = false,\n    frac,\n}) => <FractionBase {...{ parens, ...frac }} />\n\n// =============================================================================\n","/* eslint-disable capitalized-comments */\n\nimport React, {\n    CSSProperties,\n    FC,\n    FormEventHandler,\n    InputHTMLAttributes,\n} from \"react\"\n// import Debug from \"debug\"\nimport { FractionBase } from \"../FractionBase\"\nimport { FractionInputEventHandler, FractionInputMode } from \"../types\"\n\nimport \"./FractionInput.scss\"\n\n// const debug = Debug(\"frac:view:FractionInput\")\n\nexport interface FractionInputProps {\n\n    /** Callback that is called when the user inputs a new valid Fraction value. */\n    onChange: FractionInputEventHandler\n\n    /**\n     * Current display and input mode. Defaults to `\"input\"`.\n     *\n     * @default \"input\"\n     * @see FractionInputMode\n     */\n    mode?: FractionInputMode\n    numerator: string\n    denominator: string\n}\n\n/**\n * A custom input component that looks like a fraction.\n *\n * Behavior is controlled by the `mode` prop. When `mode` is `\"input\"`, this\n * component accepts answers from the user, which are passed up via the\n * `onChange` event handler. `\"correct\"` and `\"incorrect\"` are display modes.\n * When in one of these modes, a provided `display` fraction is shown and the\n * component enters a read-only state. Note that providing a `display` value\n * when in `\"input\"` mode has no effect.\n *\n * @param props\n */\nexport const FractionInput: FC<FractionInputProps> = ({\n    onChange,\n    mode = \"input\",\n    numerator,\n    denominator,\n}) => {\n\n    /** Is `mode` a display mode? */\n    const readonly = !(mode === \"input\")\n\n    /** Is `mode` a display mode and do the input fields have populated values? */\n    const filled = mode === \"correct\" || mode === \"incorrect\"\n    const updateValue: (field: \"numerator\" | \"denominator\") => FormEventHandler<HTMLInputElement> =\n        field => e => onChange(field, e.currentTarget.value)\n\n    // Make both input boxes have the same width. Use the largest one, but no\n    // Smaller than 1 character\n    const style: CSSProperties = {\n        width: `${Math.max(numerator?.length ?? 0, denominator?.length ?? 0, 1)}ch`,\n        ...(filled\n            ? { backgroundColor: \"#282c34\", borderStyle: \"hidden\" }\n            : {}),\n    }\n    const commonInputProps: InputHTMLAttributes<HTMLInputElement> = {\n        style,\n        type:            \"text\",\n        pattern:         \"^-?[0-9]*$\",\n        disabled:        readonly,\n        \"aria-disabled\": readonly,\n    }\n\n    return (\n        <FractionBase\n            className={mode}\n            isNegative={false}\n            numerator={\n                <input\n                    name=\"numerator\"\n                    onInput={updateValue(\"numerator\")}\n                    title={\"numerator\"}\n                    value={numerator}\n                    {...commonInputProps}\n                />\n            }\n            denominator={\n                <input\n                    name=\"denominator\"\n                    onInput={updateValue(\"denominator\")}\n                    title={\"denominator\"}\n                    value={denominator}\n                    {...commonInputProps}\n                />\n            }\n        />\n    )\n}\n","import {\n    createSlice,\n    PayloadAction,\n} from \"@reduxjs/toolkit\"\nimport { Operation, Strategies, QuestionGenerationConfig } from \"../lib\"\n\n/**\n * Initial state object for question slice\n */\nconst initialState: QuestionGenerationConfig = {\n    operations:     [Operation.Addition],\n    negative:       false,\n    range:          [1, 10],\n    countRange:     [2, 3],\n    strategy:       \"default\",\n    mixedFractions: false,\n}\n\nconst questionConfig = createSlice({\n    name:     \"questionConfig\",\n    initialState,\n    reducers: {\n\n        reset() {\n            return initialState\n        },\n\n        /**\n         * Adds an operation to the list of possible question types.\n         *\n         * @param state\n         * @param action\n         */\n        addOperation(state, action: PayloadAction<Operation>) {\n            !(state.operations) && (state.operations = [])\n\n            if (!state.operations.includes(action.payload)) {\n                state.operations?.push(action.payload)\n            }\n        },\n\n        /**\n         * Removes an operation to the list of possible question types.\n         *\n         * @param state\n         * @param action\n         */\n        removeOperation(state, action: PayloadAction<Operation>) {\n            !(state.operations) && (state.operations = [])\n            state.operations = state.operations.filter(el => el !== action.payload)\n        },\n\n        /**\n         * Updates the range of possible numerator/denominator values.\n         *\n         * @param state\n         * @param action\n         */\n        setValueRange(state, action: PayloadAction<[min: number, max: number]>) {\n            state.range = action.payload\n        },\n\n        /**\n         * Updates the minimum numerator/denominator value.\n         *\n         * @param state\n         * @param action\n         */\n        setValueMin(state, action: PayloadAction<number>) {\n            state.range && (state.range[0] = action.payload)\n        },\n\n        /**\n         * Updates the maximum numerator/denominator value.\n         *\n         * @param state\n         * @param action\n         */\n        setValueMax(state, action: PayloadAction<number>) {\n            state.range && (state.range[1] = action.payload)\n        },\n\n        setStrategy(state, action: PayloadAction<Strategies>) {\n            state.strategy = action.payload\n        },\n\n        setMixedFractions(state, action: PayloadAction<boolean>) {\n            state.mixedFractions = action.payload\n        },\n\n        setNegatives(state, action: PayloadAction<boolean>) {\n            state.negative = action.payload\n        },\n    },\n})\n\n// Export default questionConfig\nexport const {\n    reset,\n    addOperation,\n    removeOperation,\n    setValueRange,\n    setValueMin,\n    setValueMax,\n    setStrategy,\n    setMixedFractions,\n    setNegatives,\n} = questionConfig.actions\nexport default questionConfig.reducer\n","/* eslint-disable max-len */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { Question, raise } from \"../lib\"\n\n\n/**\n * State for a single question on a worksheet.\n *\n * @see WorksheetState\n */\nexport type QuestionState = {\n    question: Question\n\n    /** The user-provided answer. Not the \"correct\" solution. */\n    answer: [n: string, d: string]\n}\n\n/**\n * Active state for a worksheet. Includes info such as the questions on the\n * worksheet. Does not contain configuration.\n *\n * @see QuestionGenerationConfig worksheet config state for generating random questions\n */\nexport interface WorksheetState {\n\n    /**\n     * Array of question/answer data.\n     *\n     * Each element contains a question being displayed and the user's answer.\n     * If they have not yet answered the question, answer is undefined.\n     */\n    questions: QuestionState[],\n\n    /**\n     * Whether or not the user has finished working on the worksheet. Finished\n     * worksheets display correct answers and user answers may not be modified.\n     */\n    isDone: boolean,\n}\n\nconst initialState: WorksheetState = {\n    questions: [],\n    isDone:    false,\n}\n\nconst worksheet = createSlice({\n    name:     \"worksheet\",\n    initialState,\n    reducers: {\n\n        /**\n         * Resets the worksheet. Completed worksheets in the done state will\n         * transition to a not done state.\n         */\n        clearQuestions: () => initialState,\n\n        /**\n         * Populates the questions list with a clean set of questions.\n         *\n         * @param state\n         * @param action\n         *\n         * @throws if the worksheet has already been completed (i.e. `isDone === true`)\n         */\n        setQuestions: (state, action: PayloadAction<Question[]>) => (\n            state.isDone && raise(\"Cannot set questions, the worksheet has already been completed.\"),\n            {\n                ...state,\n                questions: action.payload.map(\n                    question => ({ question, answer: [\"\", \"\"] })\n                ),\n            }\n        ),\n\n        /**\n         * Sets the user's answer to a specific question.\n         */\n        answerQuestion: {\n\n            /**\n             * Creates the `answerQuestion` action object.\n             *\n             * @param i             The question number\n             * @param numerator     The answer's numerator\n             * @param denominator   The answer's denominator\n             *\n             * @returns final action object\n             */\n            prepare: (i: number, numerator: string, denominator: string) => ({\n                payload: { i, answer: [numerator, denominator] as [string, string] },\n            }),\n            reducer: (\n                state,\n                {\n                    payload: { i, answer },\n                }: PayloadAction<{ i: number, answer: [n: string, d: string] }>\n            ) => (\n                // Throw if worksheet is finished or question number is out of bounds\n                state.isDone && raise(`Cannot answer question #${i}, the worksheet has already been completed.`),\n                !state.questions.length && raise(\"List of questions is empty\"),\n                state.questions.length <= i && raise(`Question #${i} does not exist and is out of bounds`),\n                // Set answer for question i\n                state.questions[i].answer = answer,\n                state\n            ),\n        },\n\n        /**\n         * Marks the worksheet as complete.\n         *\n         * When in a done state, questions and answers may not be modified.\n         * Attempting to do so will throw an error. The worksheet state must\n         * be cleared before questions may be updated again.\n         *\n         * @param state\n         *\n         * @see clearQuestions\n         */\n        setDone: (state) => {\n            state.isDone = true\n        },\n    },\n})\n\nexport const {\n    clearQuestions,\n    setQuestions,\n    answerQuestion,\n    setDone,\n} = worksheet.actions\nexport default worksheet.reducer\n","import { Middleware } from \"redux\"\nimport Debug from \"debug\"\n\nconst debug = Debug(\"frac:state:middleware\")\n\nexport const logger: Middleware = store => next => action => {\n    debug(\"dispatching action '%s': %O\", action.type, action)\n    const result = next(action)\n    debug(\"next state: %O\", store.getState())\n\n    return result\n}\n\nexport const crashReporter: Middleware = store => next => action => {\n    try {\n        return next(action)\n    } catch (err) {\n        debug(\"State at error: %O\", store.getState())\n        err.state = store\n\n        throw err\n    }\n}\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\n\n// eslint-disable-next-line\nimport { QuestionGenerationConfig } from \"../lib\"\nimport questionConfig from \"./questions.config\"\nimport worksheet from \"./questions\"\nimport { logger, crashReporter } from \"./middleware\"\n\n/** The root reducer */\nconst reducer = combineReducers({\n\n    /**\n     * User settings that configure how questions and fractions are\n     * generated. Includes things like how many questions to generate per\n     * worksheet, what operations are present in each question, etc.\n     *\n     * @see QuestionGenerationConfig\n     */\n    questionConfig,\n\n    /**\n     * Active worksheet state. Includes list of current questions, etc.\n     *\n     * @see WorksheetState\n     */\n    worksheet,\n})\n\n/** The application's Redux store. */\nconst store = configureStore({\n    reducer,\n    middleware: defaults => defaults({\n        serializableCheck: false, // TODO(don): Probably shouldn't do this, but we need to store fractions ¯\\_(ツ)_/¯\n    }).concat(logger, crashReporter),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport default store\n","import Debug from \"debug\"\nimport { generateQuestion, Question } from \"../lib\"\nimport { setQuestions } from \"./questions\"\nimport store from \"./store\"\n\nconst debug = Debug(\"frac:state:dispatch\")\n\n/**\n * Generates a random set of questions using the user's question generation\n * settings.\n *\n * @param num the number of questions to generate\n *\n * @see generateQuestion\n */\nexport const generateQuestions = (num: number): void => {\n    debug(\"generating %d questions\", num)\n    const questions: Question[] = []\n    const { questionConfig } = store.getState()\n\n    for (let i = 0; i < num; i++) {\n        questions.push(generateQuestion(questionConfig))\n    }\n\n    store.dispatch(setQuestions(questions))\n}\n","import store from \"./store\"\n\nexport * from \"./store\"\nexport * from \"./questions.config\"\nexport * from \"./questions\"\nexport * as dispatchers from \"./dispatchers\"\n\nexport default store\n","import React, { ButtonHTMLAttributes } from \"react\"\nimport classNames from \"classnames\"\nimport \"./Button.scss\"\n\nexport interface BaseButtonProps {\n\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary?: boolean;\n\n  /**\n   * What background color to use\n   */\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  size?: \"small\" | \"medium\" | \"large\";\n\n  /**\n   * Button contents. Ignored if children are provided\n   */\n  label?: string;\n\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n}\n\nexport type ButtonProps = BaseButtonProps & ButtonHTMLAttributes<HTMLButtonElement>\n\n/**\n * A styled button component.\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef<\n    HTMLButtonElement,\n    ButtonProps\n>( ({\n    primary = false,\n    size = \"medium\",\n    type = \"button\",\n    backgroundColor,\n    label,\n    children,\n    className,\n    ...props\n},\nref) => {\n    const mode = primary ? \"primary\" : \"secondary\"\n    return (\n        <button\n            type={type}\n            className={classNames([\"button\", size, mode, className])}\n            style={{ backgroundColor }}\n            ref={ref}\n            {...props}\n        >\n            {children ?? label ?? \"\"}\n        </button>\n    )\n})\n","import { FC } from \"react\"\nimport classNames from \"classnames\"\nimport { Fraction, Question } from \"../../lib\"\nimport { FractionComponent } from \"../fraction\"\nimport { symbolFor } from \"../../lib/util\"\n\nimport \"./Question.scss\"\n\nexport interface QuestionBodyProps {\n\n    /**\n     * The question being displayed\n     */\n    question: Question\n}\n\n/**\n * Displays question information common across all question archetypes. In an\n * equation, this is the left-hand side.\n *\n * @param props the component's props\n *\n * @see QuestionBodyProps\n */\nexport const QuestionBody: FC<QuestionBodyProps> = ({ question, children }) => (\n    <div className=\"question\">\n        <QuestionNode question={question} />\n        {children}\n    </div>\n)\n\nconst QuestionNode: FC<QuestionBodyProps> = ({ question }) => {\n    if (question instanceof Fraction) {\n        return <FractionComponent frac={question} />\n    }\n\n    const { left, right, operation } = question\n\n    return (\n        <>\n            <FractionComponent frac={left} />\n            <span className={classNames(\"operation\", operation)}>{symbolFor(operation)}</span>\n            <QuestionNode question={right} />\n        </>\n    )\n}\n","import React, { FC, useMemo } from \"react\"\nimport {\n    shallowEqual,\n    useDispatch,\n    useSelector\n} from \"react-redux\"\nimport { BsCheck, BsExclamationTriangle, BsXCircle } from \"react-icons/bs\"\nimport { Question, solveQuestion } from \"../../lib\"\nimport { answerQuestion, QuestionState, RootState } from \"../../state\"\nimport {\n    FractionInput,\n    FractionInputProps,\n    FractionInputEventHandler,\n    getDisplayMode,\n    userInputToFraction,\n    FractionInputMode\n} from \"../fraction\"\nimport { QuestionBody } from \"./QuestionBody\"\nimport { IconBaseProps } from \"react-icons\"\nimport classNames from \"classnames\"\n\nconst QuestionModeIcon: FC<{ mode: FractionInputMode } & IconBaseProps> =\n    ({ mode, ...props }) => {\n        switch(mode) {\n            case \"input\":      return null\n            case \"correct\":    return <BsCheck title={mode} { ...props} />\n            case \"incorrect\":  return <BsXCircle title={mode} {...props} />\n            case \"incomplete\": return <BsExclamationTriangle title={mode} {...props} />\n        }\n    }\n\n// const modeToIcon: Record<FractionInputMode, Nullable<JSX.Element>> = {\n//     \"input\":      null,\n//     \"correct\":    <BsCheck />,\n//     \"incorrect\":  <BsXCircle />,\n//     \"incomplete\": <BsExclamationTriangle />,\n\n// }\nexport interface FillBlanksQuestionProps {\n    question: Question\n    isDone: boolean\n    onChange: FractionInputEventHandler\n    numerator: string\n    denominator: string\n    questionNum?: number\n}\n\n/**\n * Displays a \"fill in the blanks\" question. The user is prompted with a fraction\n * input where they may type in their solution.\n *\n * @param props\n *\n * @see QuestionBody\n * @see FractionInput\n */\nexport const FillBlanksQuestion: FC<FillBlanksQuestionProps> = ({\n    question,\n    isDone,\n    numerator,\n    denominator,\n    questionNum,\n    ...rest\n}) => {\n    // Calculate correct answer to question\n    const solution = useMemo(() => solveQuestion(question), [question])\n    // Check user answer against solution\n    const isCorrect = useMemo(\n        () => {\n\n            const f = userInputToFraction(numerator, denominator)\n            // Strings mean error messages -> incorrect\n            return typeof f !== \"string\" && f.eq(solution)\n        },\n        [numerator, denominator, solution]\n    )\n    // Derive mode from above checks + worksheet state\n    const mode = useMemo(\n        () => getDisplayMode({\n            isDone,\n            isCorrect,\n            userSolution: [numerator, denominator],\n        }),\n        [isDone, isCorrect, numerator, denominator]\n    )\n    // Pack it all up, send it down\n    const props: FractionInputProps = {\n        mode,\n        numerator,\n        denominator,\n        ...rest,\n    }\n\n    return (\n        <>\n            {questionNum != null &&\n                <span className=\"question-number\">\n                    {(questionNum + 1) + \".\"}\n                    &nbsp;\n                    <QuestionModeIcon mode={mode} className={classNames(\"icon\", mode)} />\n                </span>\n            }\n            <span className=\"question-wrapper\">\n                <QuestionBody question={question}>\n                    <span className=\"operation\">=</span>\n                    <FractionInput {...props} />\n                </QuestionBody>\n            </span>\n        </>\n    )\n}\n\nexport interface ConnectedFillBlanksQuestionProps {\n    questionNum: number\n}\n\nexport const ConnectedFillBlanksQuestion: FC<ConnectedFillBlanksQuestionProps> = ({\n    questionNum,\n}) => {\n    const dispatch = useDispatch()\n    const {\n        question,\n        answer: [numerator = \"\", denominator = \"\"],\n    } = useSelector<RootState, QuestionState>(\n        state => state.worksheet.questions[questionNum],\n        shallowEqual\n    )\n\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n    const onAnswerChange: FractionInputEventHandler = (field, val) => {\n        if(field === \"numerator\") {\n            dispatch(answerQuestion(questionNum, val, denominator))\n        } else {\n            dispatch(answerQuestion(questionNum, numerator, val))\n        }\n    }\n\n    const props: FillBlanksQuestionProps = {\n        onChange: onAnswerChange,\n        question,\n        isDone,\n        numerator,\n        denominator,\n        questionNum,\n    }\n    return <FillBlanksQuestion {...props} />\n}\n","import React, { FC } from \"react\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\n\nimport {\n    RootState,\n    setDone,\n    clearQuestions,\n} from \"../../../state\"\nimport { Button } from \"../../button/Button\"\n\nimport \"./FlowWorksheet.scss\"\nimport { generateQuestions } from \"../../../state/dispatchers\"\nimport { ConnectedFillBlanksQuestion } from \"../../question/FillBlanksQuestion\"\nimport { times } from \"ramda\"\nimport { BsArrowClockwise, BsCheckCircle } from \"react-icons/bs\"\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlowWorksheetProps { }\n\n/**\n * A fractions worksheet with a responsive layout. Questions are displayed in a\n * grid that changes dimensions depending on the client's viewport size. This\n * worksheet is meant to be used on a browser, not printed.\n *\n * @param props Component props\n */\nexport const FlowWorksheet: FC<FlowWorksheetProps> = () => {\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n    const numQuestions = useSelector<RootState, number>(\n        state => state.worksheet.questions.length,\n        shallowEqual\n    )\n    const dispatch = useDispatch()\n    const finishWorksheet = () => dispatch(setDone())\n    const resetWorksheet = () => {\n        dispatch(clearQuestions())\n        generateQuestions(24)\n    }\n    return (\n        <main>\n            <form className=\"worksheet container\">\n                <div className=\"grid row\" role=\"list\">\n                    {times(\n                        i => (\n                            <div\n                                key={i}\n                                className=\"col-12 col-sm-6 col-md-4 col-xxl-2\"\n                                role=\"listitem\"\n                            >\n                                <ConnectedFillBlanksQuestion questionNum={i} />\n                            </div>\n                        ),\n                        numQuestions\n                    )}\n                </div>\n                <div className=\"button-group\">\n                    {!isDone &&\n                <Button\n                    type=\"button\"\n                    role=\"submit\"\n                    primary\n                    onClick={finishWorksheet}\n                >\n                    <BsCheckCircle /> Finish\n                </Button>\n                    }\n                    <Button\n                        type=\"button\"\n                        role=\"reset\"\n                        primary={isDone}\n                        onClick={resetWorksheet}\n                    >\n                        <BsArrowClockwise /> Reset\n                    </Button>\n                </div>\n            </form>\n        </main>\n    )\n}\n","import React, { FC } from \"react\"\nimport { BsFillHeartFill } from \"react-icons/bs\"\n\nimport \"./Footer.scss\"\n\nexport interface FooterProps {\n\n}\n\nexport const Footer: FC<FooterProps> = () => (\n    <footer>\n        <h3>Made with <BsFillHeartFill title=\"love\" /> by <a href=\"https://github.com/DonIsaac\" target=\"_blank\" rel=\"noreferrer\">Don</a></h3>\n    </footer>\n)\n","import React, { FC } from \"react\"\nimport { BsFillGearFill } from \"react-icons/bs\"\nimport { Button } from \"../../button\"\n\nimport \"./Header.scss\"\n\nexport type HeaderLinkName = \"settings\"\nexport interface HeaderProps {\n    onClick: (linkName: HeaderLinkName) => void\n}\n\nexport const Header: FC<HeaderProps> = ({\n    onClick,\n}) => (\n    <header>\n        <h1>Fraction Worksheet Generator</h1>\n        <nav>\n            <Button primary className=\"settings\" onClick={() => onClick(\"settings\")}>\n                <BsFillGearFill /> Settings\n            </Button>\n        </nav>\n    </header>\n)\n","import React from \"react\"\nimport { AnyAction } from \"@reduxjs/toolkit\"\nimport { useDispatch } from \"react-redux\"\n\nexport type InputProps<\n    P, A extends (arg: P) => AnyAction // PayloadActionCreator<P>\n> = {\n\n    /**\n     * Used for `id`, `name`, etc.\n     */\n    name: string\n\n    /**\n     * Current value of input\n     */\n    value: P\n\n    /**\n     * Creates action that is dispatched when value is changed.\n     */\n    action: A\n}\n\n/**\n * A form input field that dispatches an action when its value changes.\n */\ntype InputComponent<P> = <A extends (arg: P) => AnyAction>(\n    props: InputProps<P, A>\n) => React.ReactElement | null\n\nexport const CheckboxInput: InputComponent<boolean> = ({ name, value, action }) => {\n    const dispatch = useDispatch()\n\n    return (\n        <input\n            id={name}\n            name={name}\n            type=\"checkbox\"\n            checked={value}\n            className=\"form-check-input\"\n            onChange={\n                () => dispatch(action(!value))\n            }\n        />\n    )\n}\n\nexport const NumberInput: InputComponent<number> = ({ name, value, action }) => {\n    const dispatch = useDispatch()\n\n    return (\n        <input\n            id={name}\n            name={name}\n            type=\"number\"\n            min={0}\n            value={value}\n            className=\"form-input\"\n            onChange={\n                e => dispatch(action(Number.parseInt(e.target.value)))\n            }\n        />\n    )\n}\n","import React, { FC } from \"react\"\nimport { PayloadAction } from \"@reduxjs/toolkit\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\nimport { BsCheckCircle, BsArrowClockwise } from \"react-icons/bs\"\n\nimport { Operation, QuestionGenerationConfig, symbolFor } from \"../../../lib\"\nimport {\n    RootState,\n    addOperation,\n    removeOperation,\n    setValueMax,\n    setValueMin,\n    setNegatives,\n    setMixedFractions,\n    reset\n} from \"../../../state\"\nimport { Button } from \"../../button\"\nimport { CheckboxInput, NumberInput } from \"./FormComponents\"\n\nimport \"./SettingsForm.scss\"\n\nexport interface SettingsFormProps {\n    onDone: () => void\n}\n\nexport const SettingsForm: FC<SettingsFormProps> = ({ onDone }) => {\n    const dispatch = useDispatch()\n    const {\n        operations,\n        range: [valueMin = 1, valueMax = 10] = [],\n        // CountRange: [countMin = 2, countMax = 3] = [],\n        mixedFractions = false,\n        negative = false,\n    } = useSelector<RootState, QuestionGenerationConfig>(\n        store => store.questionConfig,\n        shallowEqual\n    )\n    return (\n        <form className=\"container\">\n            <div className=\"form-row\">\n                <OperationsInputGroup operations={operations} />\n                <br />\n                <div className=\"form-group\">\n                    <label htmlFor=\"value-min,value-max\">Value Range: </label>\n                    <br />\n                    <NumberInput\n                        name=\"value-min\"\n                        value={valueMin}\n                        action={setValueMin}\n                    /> To <NumberInput\n                        name=\"value-max\"\n                        value={valueMax}\n                        action={setValueMax}\n                    />\n                </div>\n                <br />\n                <div className=\"form-row form-group\">\n                    <div className=\"col form-check form-check-inline\">\n                        <label htmlFor=\"negatives\" className=\"form-check-label\">Negatives?</label>\n                        <CheckboxInput name=\"negatives\" value={negative} action={setNegatives} />\n                    </div>\n                    <div className=\"col form-check form-check-inline\">\n                        <label htmlFor=\"mixed-fractions\" className=\"form-check-label\">Mixed Fractions?</label>\n                        <CheckboxInput name=\"mixed-fractions\" value={mixedFractions} action={setMixedFractions} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"button-group centered\">\n                <Button role=\"submit\" primary onClick={onDone}>\n                    <BsCheckCircle /> Done\n                </Button>\n                <Button role=\"clear\" onClick={() => dispatch(reset())}>\n                    <BsArrowClockwise /> Reset\n                </Button>\n            </div>\n        </form>\n    )\n}\n\ntype OnOpChange = (checked: boolean) => PayloadAction<string>\nconst OperationsInputGroup: FC<{ operations: Operation[] }> = ({\n    operations,\n}) => {\n\n    const onChange: (op: Operation) => OnOpChange =\n        op => checked => checked\n            ? addOperation(op)\n            : removeOperation(op)\n\n    return (\n\n        <div className=\"form-group\">\n            <label>Operations: </label>\n            <br />\n            {Object.keys(Operation).map(opName => {\n                const name = `op-${opName.toLowerCase()}`\n                const op: Operation = (\n                    Operation as Record<string, string>\n                )[opName] as Operation\n                const display = symbolFor(op)\n                const props = {\n                    name,\n                    value:  operations.includes(op),\n                    action: onChange(op),\n                }\n\n                return (\n                    <div className=\"form-check form-check-inline\">\n                        <CheckboxInput {...props} />\n                        <label htmlFor={name} className=\"form-check-label\">{display}</label>\n                        &nbsp;\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n","import React, { MouseEventHandler, PropsWithChildren, useEffect } from \"react\"\nimport { Variants, motion } from \"framer-motion\"\nimport { BsXCircle } from \"react-icons/bs\"\n\nimport \"./Modal.scss\"\n\nconst modalVariants: Variants = {\n    open: {\n        display:    \"\",\n        opacity:    1,\n        transition: {\n            // Delay: 0,\n        },\n    },\n    closed: {\n        display:    \"none\",\n        opacity:    0,\n        transition: {\n            delay: 0.75,\n        },\n    },\n}\nconst bodyVariants: Variants = {\n    open: {\n        scale:      1,\n        transition: {\n            type: \"spring\",\n        },\n    },\n    closed: {\n        scale:      0,\n        transition: {\n            type: \"spring\",\n            // Delay: 0.5,\n        },\n    },\n}\n\nexport interface ModalProps {\n    onClose: () => void;\n    visible?: boolean\n    title?: string | JSX.Element\n}\n\nexport const Modal = React.forwardRef<HTMLDivElement, PropsWithChildren<ModalProps>>(\n    ({\n        children,\n        onClose,\n        visible = true,\n        title = \"\",\n    }, ref) => {\n        const handleKeyPress = (e: KeyboardEvent) => {\n            e.key?.toLowerCase().includes(\"esc\")\n            onClose()\n        }\n\n        const doNotClose: MouseEventHandler = e => e.stopPropagation()\n\n        useEffect(() => {\n            document.addEventListener(\"keydown\", handleKeyPress)\n        })\n\n        return <motion.div\n            className=\"modal\"\n            animate={visible ? \"open\" : \"closed\"}\n            initial={false}\n            variants={modalVariants}\n            onClick={onClose}\n        >\n            <motion.div\n                className=\"modal-body\"\n                ref={ref}\n                variants={bodyVariants}\n                onClick={doNotClose}\n            >\n                <header className=\"modal-header\">\n                    <span className=\"title\">\n                        {typeof title === \"string\" ? <h2>{title}</h2> : title}\n                    </span>\n                    <button className=\"close\" aria-label=\"close\" onClick={onClose}>\n                        <BsXCircle />\n                    </button>\n                </header>\n                <div className=\"modal-content\">\n\n                    {children}\n                </div>\n            </motion.div>\n        </motion.div>\n    })\n","import React, { Component, ErrorInfo, PropsWithChildren } from \"react\"\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype ErrorBoundaryProps = PropsWithChildren<{}>\nexport interface ErrorBoundaryState {\n    hasError: boolean\n}\n\nexport class ErrorBoundary extends Component<\n    ErrorBoundaryProps,\n    ErrorBoundaryState\n> {\n    constructor(props: PropsWithChildren<Record<string, never>>) {\n        super(props)\n        this.state = { hasError: false }\n    }\n\n    static getDerivedStateFromError(error: unknown): Partial<ErrorBoundaryState> {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true }\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n        console.error(error)\n        console.error(errorInfo)\n    }\n\n    render(): React.ReactNode {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return (\n                <div>\n                    <h1>Something went wrong, please try again.</h1>\n                    <p>If this continues, please <a href=\"https://github.com/DonIsaac/Fraction-Worksheet-Generator/issues\">submit a bug report</a>.</p>\n                </div>\n            )\n\n        }\n\n        return this.props.children\n    }\n}\n","import React, { FC, useState } from \"react\"\n\nimport {\n    FlowWorksheet,\n    Footer,\n    Header,\n    HeaderLinkName,\n    SettingsForm\n} from \"./page\"\nimport { dispatchers } from \"../state\"\nimport { Modal } from \"./modal\"\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport logo from \"./logo.svg\"\nimport \"./App.scss\"\nimport { ErrorBoundary } from \"./boundary/ErrorBoundary\"\n\nconst App: FC = () => {\n    const [modalVisible, setModalVisible] = useState(false)\n    const [questionsGenerated, setQuestionsGenerated] = useState(false)\n\n    if (!questionsGenerated) {\n        dispatchers.generateQuestions(24)\n        setQuestionsGenerated(true)\n    }\n\n    const hideModal = () => setModalVisible(false)\n    const onHeaderClick = (linkName: HeaderLinkName) => {\n        if (linkName == \"settings\") {\n            setModalVisible(!modalVisible)\n        }\n    }\n\n    return (\n        <>\n            <Header onClick={onHeaderClick}/>\n            <Modal\n                visible={modalVisible}\n                title=\"Settings\"\n                onClose={hideModal}\n            >\n                <ErrorBoundary>\n                    <SettingsForm onDone={hideModal}/>\n                </ErrorBoundary>\n            </Modal>\n            <ErrorBoundary>\n\n                <FlowWorksheet />\n            </ErrorBoundary>\n            <Footer />\n        </>\n    )\n}\n\nexport default App\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport Debug from \"debug\"\n\nimport App from \"./components/App\"\nimport store from \"./state\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nimport \"./index.scss\"\n\n// Namespaces need to be manually enabled because webpack weirdness\nconst namespaces = process.env.DEBUG || (\n    process.env.NODE_ENV === \"production\"\n        ? \"\"\n        : \"frac:*\"\n)\n\nDebug.enable(namespaces)\nDebug.log = console.info.bind(console)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// To log results (for example: reportWebVitals(console.log))\n// Or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// ReportWebVitals(console.log)\nreportWebVitals()\n"],"sourceRoot":""}
{"version":3,"sources":["lib/util.ts","features/worksheet/worksheet.store.ts","components/button/Button.tsx","features/question/fraction/Fraction.ts","features/question/types.ts","features/question/fraction/components/FractionBase.tsx","features/question/fraction/components/fraction-display/FractionDisplay.tsx","features/question/fraction/components/fraction-input/FractionInput.tsx","features/question/fraction/util.ts","features/question/fraction/index.ts","features/question/components/QuestionBody.tsx","features/question/components/FillBlanksQuestion.tsx","features/question/Question.ts","features/worksheet/question-config.store.ts","app/state/middleware.ts","app/state/store.ts","app/state/dispatchers.ts","features/worksheet/FlowWorksheet.tsx","components/page/footer/Footer.tsx","components/page/header/Header.tsx","components/page/settings/FormComponents.tsx","components/page/settings/SettingsForm.tsx","app/state/index.ts","components/modal/Modal.tsx","components/modal/index.ts","components/boundary/ErrorBoundary.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["gcd","a","b","lcm","floatToInt","num","scale","Number","isInteger","MAX_VALUE","randomInt","min","max","Math","floor","random","raise","RangeError","err","Error","captureStackTrace","initialState","questions","isDone","worksheet","createSlice","name","reducers","clearQuestions","setQuestions","prepare","payload","reducer","state","action","map","question","answer","answerQuestion","i","numerator","denominator","length","setDone","actions","Button","React","forwardRef","ref","primary","size","type","backgroundColor","label","children","className","props","mode","classNames","style","Fraction","isNegative","equals","this","eq","abs","other","simplify","strictEq","divisor","denom","s1","s2","sign","neg","mult","reciprocal","isNeg","options","strategy","opts","mixedFractions","negative","gen","generators","MIXED_FRAC_SCALAR","range","Operation","FractionBase","parens","role","aria-label","FractionDisplay","frac","FractionInput","onChange","readonly","filled","updateValue","field","e","currentTarget","value","commonInputProps","width","borderStyle","pattern","disabled","onInput","title","VALID_INT_REGEX","VALID_POSITIVE_INT_REGEX","userInputToFraction","d","n","test","parseInt","QuestionBody","QuestionNode","left","right","operation","symbolFor","QuestionModeIcon","FillBlanksQuestion","questionNum","rest","solution","useMemo","solveQuestion","isCorrect","f","userSolution","Array","getDisplayMode","shouldDisplaySolution","ConnectedFillBlanksQuestion","dispatch","useDispatch","useSelector","shallowEqual","val","q","Addition","add","Subtraction","sub","Multiplication","Division","div","generateQuestion","operations","countRange","_genQuestion","count","args","generateFraction","op","debug","Debug","LOCALSTORAGE_KEY","questionConfig","serialized","localStorage","getItem","JSON","parse","console","error","loadQuestionConfigStore","reset","addOperation","includes","push","removeOperation","filter","el","setValueRange","setValueMin","setValueMax","setStrategy","setMixedFractions","setNegatives","logger","store","next","result","getState","crashReporter","combineReducers","configureStore","middleware","defaults","serializableCheck","concat","generateQuestions","FlowWorksheet","numQuestions","times","onClick","Footer","href","target","rel","Header","CheckboxInput","id","checked","NumberInput","FormGroup","legend","SettingsForm","onDone","valueMin","valueMax","htmlFor","OperationsInputGroup","Object","keys","opName","toLowerCase","display","modalVariants","open","opacity","transition","closed","delay","bodyVariants","Modal","onClose","visible","handleKeyPress","key","useEffect","document","addEventListener","removeEventListener","motion","animate","initial","variants","stopPropagation","ErrorBoundary","hasError","errorInfo","Component","App","useState","modalVisible","setModalVisible","questionsGenerated","setQuestionsGenerated","oldQuestionConfig","setOldQuestionConfig","onSettingsDone","reduce","acc","stringify","setItem","saveQuestionConfigStore","linkName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","namespaces","process","DEBUG","enable","log","info","bind","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4c44055f.chunk.js","sourcesContent":["/**\n * Finds the greatest common divisor between two numbers\n *\n * @param a\n * @param b\n *\n * @see {@link https://en.wikipedia.org/wiki/Euclidean_algorithm Euclid's Algorithm}\n */\nexport const gcd = (a: number, b: number): number =>\n    b <= 0\n        ? a\n        : gcd(b, a % b)\n\n/**\n * Finds the least common multiple (LCM) for two numbers.\n *\n * @param a\n * @param b\n *\n * @see {@link https://artofproblemsolving.com/wiki/index.php/Least_common_multiple}\n */\nexport const lcm = (a: number, b: number): number => a * b / gcd(a, b)\n\n/**\n * Multiplies a decimal by 10 until it is an integer\n *\n * ```ts\n * floatToInt(1.5) // => [15, 10]\n * floatToInt(7) // => [7, 1]\n * floatToInt(3.14) // => [314, 100]\n * ```\n * @param num\n * @param scale Used for recursive calls. Do not use this.\n */\nexport const floatToInt = (num: number, scale = 1): [number, number] =>\n    Number.isInteger(num) && (num < Number.MAX_VALUE / 100)\n        ? [num, scale]\n        : floatToInt(num * 10, scale * 10)\n\n/**\n * Generates a random integer between `min` (inclusive) and `max` (exclusive).\n *\n * @param min G\n * @param max\n *\n * @throws if `max` is not strictly greater than `min`\n * @returns the generated int\n */\nexport const randomInt = (min: number, max: number): number =>\n    max > min\n        ? Math.floor(Math.random() * (max - min)) + min\n        : raise(new RangeError(\"Range max must be greater than the min\"))\n\n\n/**\n * Calls a function a certain number of times\n * @param n the number of iterations\n */\nexport const times = (n: number) => <T>(fn: (i: number) => T): T[] => (\n    n = Math.max(n, 0),\n    Array(n).fill(n).map((_, i) => fn(i))\n)\n\n/**\n * Throws an error.\n *\n * @param err The error to throw, or an error message (which is passed to a new Error)\n */\nexport const raise = (err: Error | string): never => {\n    if (typeof err === \"string\") {\n        err = new Error(err)\n        // Don't include throws() in the stack trace\n        Error.captureStackTrace(err, raise)\n    }\n\n    throw err\n}\n\n/**\n * Zips two arrays into one array where each element is a pair of values from the\n * first and the second arrays. Only supposed to be called on arrays of equal length.\n *\n * @param a first array\n * @param b second array\n * @returns array of pairs of values from the two arrays\n */\nexport const zip = <A, B>(a: A[], b: B[]): [A, B][] => a.map((a, i) => [a, b[i]])\n","/* eslint-disable max-len */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { raise } from \"../../lib\"\nimport { Question } from \"../question\"\n\ntype AnswerQuestionAction = PayloadAction<{ i: number, answer: [n: string, d: string] }>\n\n/**\n * State for a single question on a worksheet.\n *\n * @see WorksheetState\n */\nexport type QuestionState = {\n    question: Question\n\n    /** The user-provided answer. Not the \"correct\" solution. */\n    answer: [n: string, d: string]\n}\n\n/**\n * Active state for a worksheet. Includes info such as the questions on the\n * worksheet. Does not contain configuration.\n *\n * @see QuestionGenerationConfig worksheet config state for generating random questions\n */\nexport interface WorksheetState {\n\n    /**\n     * Array of question/answer data.\n     *\n     * Each element contains a question being displayed and the user's answer.\n     * If they have not yet answered the question, answer is undefined.\n     */\n    questions: QuestionState[],\n\n    /**\n     * Whether or not the user has finished working on the worksheet. Finished\n     * worksheets display correct answers and user answers may not be modified.\n     */\n    isDone: boolean,\n}\n\nconst initialState: WorksheetState = {\n    questions: [],\n    isDone:    false,\n}\n\nconst worksheet = createSlice({\n    name:     \"worksheet\",\n    initialState,\n    reducers: {\n\n        /**\n         * Resets the worksheet. Completed worksheets in the done state will\n         * transition to a not done state.\n         */\n        clearQuestions: () => initialState,\n\n        /**\n         * Populates the questions list with a clean set of questions.\n         *\n         * @throws if the worksheet has already been completed (i.e. `isDone === true`)\n         */\n        setQuestions: {\n            prepare: (questions: Question[]) => ({ payload: questions }),\n            reducer: (state, action: PayloadAction<Question[]>) => (\n                state.isDone && raise(\"Cannot set questions, the worksheet has already been completed.\"),\n                {\n                    ...state,\n                    questions: action.payload.map(\n                        question => ({ question, answer: [\"\", \"\"] })\n                    ),\n                }\n            ),\n        },\n\n        /**\n         * Sets the user's answer to a specific question.\n         */\n        answerQuestion: {\n\n            /**\n             * Creates the `answerQuestion` action object.\n             *\n             * @param i             The question number\n             * @param numerator     The answer's numerator\n             * @param denominator   The answer's denominator\n             *\n             * @returns final action object\n             */\n            prepare: (i: number, numerator: string, denominator: string) => ({\n                payload: { i, answer: [numerator, denominator] as [string, string] },\n            } as AnswerQuestionAction),\n            reducer: (\n                state,\n                { payload: { i, answer } }: AnswerQuestionAction\n            ) => (\n                // Throw if worksheet is finished or question number is out of bounds\n                state.isDone && raise(`Cannot answer question #${i}, the worksheet has already been completed.`),\n                !state.questions.length && raise(\"List of questions is empty\"),\n                state.questions.length <= i && raise(`Question #${i} does not exist and is out of bounds`),\n                // Set answer for question i\n                state.questions[i].answer = answer,\n                state\n            ),\n        },\n\n        /**\n         * Marks the worksheet as complete.\n         *\n         * When in a done state, questions and answers may not be modified.\n         * Attempting to do so will throw an error. The worksheet state must\n         * be cleared before questions may be updated again.\n         *\n         * @param state\n         *\n         * @see clearQuestions\n         */\n        setDone: (state) => {\n            state.isDone = true\n        },\n    },\n})\n\nexport const {\n    clearQuestions,\n    setQuestions,\n    answerQuestion,\n    setDone,\n} = worksheet.actions\nexport default worksheet.reducer\n","import React, { ButtonHTMLAttributes } from \"react\"\nimport classNames from \"classnames\"\nimport \"./Button.scss\"\n\nexport interface BaseButtonProps {\n\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary?: boolean;\n\n  /**\n   * What background color to use\n   */\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  size?: \"small\" | \"medium\" | \"large\";\n\n  /**\n   * Button contents. Ignored if children are provided\n   */\n  label?: string;\n\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n}\n\nexport type ButtonProps = BaseButtonProps & ButtonHTMLAttributes<HTMLButtonElement>\n\n/**\n * A styled button component.\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef<\n    HTMLButtonElement,\n    ButtonProps\n>( ({\n    primary = false,\n    size = \"medium\",\n    type = \"button\",\n    backgroundColor,\n    label,\n    children,\n    className,\n    ...props\n},\nref) => {\n    const mode = primary ? \"primary\" : \"secondary\"\n    return (\n        <button\n            type={type}\n            className={classNames([\"button\", size, mode, className])}\n            style={{ backgroundColor }}\n            ref={ref}\n            {...props}\n        >\n            {children ?? label ?? \"\"}\n        </button>\n    )\n})\n","import {\n    floatToInt,\n    gcd,\n    lcm,\n    randomInt\n} from \"../../../lib/util\"\nimport { FractionGeneratorOpts, Strategies } from \"./types\"\n\nexport default class Fraction {\n\n    /**\n     * Creates a {@link Fraction} from a decimal number. The fraction will be automatically\n     * simplified.\n     *\n     * @param num The decimal number.\n     * @returns A simplified {@link Fraction} with a value equivalent to `num`.\n     */\n    public static fromDecimal(num: number): Fraction {\n        const isNeg = num < 0\n        if (isNeg) num *= -1\n        const [n, d] = floatToInt(num)\n\n        return new Fraction(n, d, isNeg).simplify()\n    }\n\n    /**\n     * Creates a random {@link Fraction} constrained by various options.\n     *\n     * Options:\n     * - `negative`: `true` to make the fraction negative, `false` otherwise.\n     * - `range`: min, max values the numerator, denominator may take.\n     * - `mixedFractions`: result may be (but is not guaranteed to be) a mixed\n     *   fraction.\n     * - `strategy`: specifies how number values are created.\n     *\n     * @see {@link FractionGeneratorOpts} Options object type definition\n     *\n     * @param options An options object to customize how fractions are created.\n     * @returns A newly created {@link Fraction}.\n     */\n    public static generateFraction(options: FractionGeneratorOpts): Fraction {\n        const { strategy = \"default\", ...opts } = options\n        const { mixedFractions, negative } = opts\n        const gen = Fraction.generators[strategy]\n\n        // Generate a random denominator value\n        const denominator = gen(opts)\n\n        // Generate a random numerator value. Use random scalar to increase value if\n        // Mixed values are desired\n        const numerator = gen(opts) * (mixedFractions\n            ? randomInt(1, Fraction.MIXED_FRAC_SCALAR)\n            : 1)\n\n        // Random sign if negatives are enabled false otherwise\n        // Const isNeg = negative && Math.random() < 0.5\n\n        return new Fraction(numerator, denominator, negative)\n    }\n\n    /**\n     * Maximum scale factor for mixed fractions. The actual scalar multiplied to\n     * the generated numerator value is `[1, MIXED_FRAC_SCALAR)`.\n     */\n    private static MIXED_FRAC_SCALAR = 3\n    private static generators: Record<\n        Strategies,\n        (opts: FractionGeneratorOpts) => number\n    > = {\n        \"default\": ({ range: [min, max] }) => randomInt(min, max),\n    }\n    public readonly numerator: number\n    public readonly denominator: number\n    public readonly isNegative: boolean\n\n    /**\n     * Creates a new `Fraction`.\n     *\n     * @param numerator     The fraction's numerator. Must be positive.\n     * @param denominator   The fraction's denominator. Cannot be zero.\n     * @param isNegative    `true` to make the fraction negative, `false` to make it positive.\n     */\n    constructor(\n        numerator: number,\n        denominator = 1,\n        isNegative: boolean | null = null\n    ) {\n        if (\n            !Number.isInteger(numerator)\n        ) {\n            throw new RangeError(\n                `Illegal numerator ${numerator}: must be a ` +\n                \"finite integer greater than or equal to 0\"\n            )\n        }\n        if (numerator < 0 && isNegative === false) {\n            throw new Error(\"Numerator value was negative, but fraction was explicitly declared positive\")\n        }\n\n        if (\n            denominator <= 0 ||\n            !Number.isInteger(denominator)\n        ) {\n            throw new RangeError(\n                `Illegal denominator ${denominator}: must be a ` +\n                \"positive finite integer\"\n            )\n        }\n\n        this.numerator = Math.abs(numerator)\n        this.denominator = denominator\n        this.isNegative = numerator < 0 || !!isNegative\n        // This.simplify()\n    }\n\n    public toDecimal(): number {\n        return (this.isNegative ? -1 : 1) * (this.numerator / this.denominator)\n    }\n\n    /**\n     * Checks if `this` is exactly equal to `other`, regardless if they are\n     * equivalent.\n     *\n     * @param other the fraction to check against.\n     *\n     * @returns `true` if the two fractions are exactly equal, `false` otherwise.\n     */\n    public strictEq(other: Fraction): boolean {\n        // Same object pointer\n        return this === other ||\n            // Both are 0\n            (this.numerator === 0 && other.numerator === 0) ||\n            // Numerator, denominator, and sign are the same\n            (this.numerator === other.numerator &&\n                this.denominator === other.denominator &&\n                this.isNegative === other.isNegative)\n    }\n\n    /**\n     * Checks if `this` is mathematically equal to `other`.\n     *\n     * @param other The fraction to check against.\n     *\n     * @returns `true` if they are equal, `false` otherwise.\n     */\n    public eq(other: Fraction): boolean {\n        // Return this.toDecimial() === other?.toDecimial()\n        if (\n            this === other ||\n            (this.numerator === 0 && other.numerator === 0)\n        ) {\n            return true\n        } else {\n            return this.simplify().strictEq(other.simplify())\n        }\n    }\n\n    /**\n     * Alias to `Fraction#eq()\n     *\n     * @see Fraction.prototype.eq\n     */\n    public equals = this.eq\n\n    public simplify(): Fraction {\n        if (!this.numerator) {\n            return new Fraction(0, this.denominator, false)\n        }\n\n        const divisor = gcd(this.numerator, this.denominator)\n\n        return new Fraction(\n            this.numerator / divisor,\n            this.denominator / divisor,\n            this.isNegative\n        )\n    }\n\n    /**\n     * Adds `this` fraction with `other`.\n     *\n     * @param other\n     */\n    public add(other: Fraction): Fraction {\n        const denom = lcm(this.denominator, other.denominator),\n            s1 = denom / this.denominator,\n            s2 = denom / other.denominator\n\n        const n1 = this.sign * this.numerator * s1,\n            n2 = other.sign * other.numerator * s2\n\n        const numerator = n1 + n2\n        const neg = numerator < 0\n\n        return new Fraction(Math.abs(numerator), denom, neg).simplify()\n    }\n\n    /**\n     * Subtracts `other` from `this`.\n     *\n     * @param other\n     */\n    public sub(other: Fraction): Fraction {\n        const denom = lcm(this.denominator, other.denominator),\n            s1 = denom / this.denominator,\n            s2 = denom / other.denominator\n\n        const n1 = this.sign * this.numerator * s1,\n            n2 = other.sign * other.numerator * s2\n\n        const numerator = n1 - n2\n        const neg = numerator < 0\n\n        return new Fraction(Math.abs(numerator), denom, neg).simplify()\n    }\n\n    /**\n     * Multiplies `this` with `other`.\n     *\n     * @param other\n     */\n    public mult(other: Fraction): Fraction {\n        return new Fraction(\n            this.numerator * other.numerator,\n            this.denominator * other.denominator,\n            this.sign * other.sign < 0\n        ).simplify()\n    }\n\n    /**\n     * Divides `other` from `this`.\n     *\n     * @param other\n     */\n    public div(other: Fraction): Fraction {\n        if (other.numerator === 0) {\n            throw new Error(\"Cannot divide by zero.\")\n        }\n\n        return this.mult(other.reciprocal())\n    }\n\n    /**\n     * Gets the reciprocal of this fraction.\n     *\n     * ```ts\n     * new Fraction(1, 2).reciprocal() // => 2/1\n     * ```\n     */\n    public reciprocal(): Fraction {\n        if (this.numerator === 0) {\n            throw new Error(\"Cannot take reciprocal of zero\")\n        }\n\n        return new Fraction(this.denominator, this.numerator, this.isNegative)\n    }\n\n    public toString(): string {\n        return (this.isNegative ? \"-\" : \"\") +\n            `${this.numerator}/${this.denominator}`\n    }\n\n    private get sign(): number {\n        return this.isNegative ? -1 : 1\n    }\n}\n","import { FractionGeneratorOpts } from \"./fraction\"\n\n/**\n * Configuration settings set by the user and passed to question generators.\n *\n * @see Question\n * @see FractionGeneratorOpts\n */\nexport interface QuestionGenerationConfig extends Partial<FractionGeneratorOpts> {\n\n    /**\n     * Possible operations that questions may use.\n     *\n     * @default [Operation.Addition]\n     */\n    operations: Operation[]\n\n    /**\n     * [min, max] number of fractions that may appear in each problem\n     *\n     * @default [2,3]\n     */\n    countRange?: [min: number, max: number]\n}\n\n/**\n * Available operations in questions.\n *\n * @see Question\n */\nexport enum Operation {\n    Addition = \"add\",\n    Subtraction = \"sub\",\n    Multiplication = \"mult\",\n    Division = \"div\"\n}\n","import React from \"react\"\nimport classNames from \"classnames\"\n\nimport \"./FractionBase.scss\"\n\nexport type FractionBaseProps = {\n    parens?: boolean\n    numerator: number | string | JSX.Element\n    denominator: number | string | JSX.Element\n    isNegative: boolean\n    className?: string | string[]\n}\nexport const FractionBase = React.forwardRef<\n    HTMLDivElement,\n    FractionBaseProps\n>(({\n    parens = false,\n    numerator,\n    denominator,\n    isNegative,\n    className,\n}, ref) => (\n    <div\n        className={classNames(\"fraction\", className)}\n        ref={ref}\n        role=\"math\"\n        aria-label={`${isNegative ? \"-\" : \"\"}${numerator}/${denominator}`}\n    >\n        {/* Open parenthesis, if specified */}\n        {parens && <span className=\"paren fullheight\">(</span>}\n        {/* Sign */}\n        {isNegative && <span className=\"fraction-sign\">-</span>}\n        {/* <div className=\"fraction-sign\">{isNegative ? \"-\" : \"\\t\"}</div> */}\n        {/* Displays the numerator and denominator */}\n        <div className=\"fraction-body-wrapper\">\n            <div className={classNames(\"fraction-body\", { \"negative\": isNegative })}>\n                <span className=\"number numerator\">\n                    {numerator}\n                </span>\n                <hr className=\"bar\" />\n                <span className=\"number denominator\">\n                    {denominator}\n                </span>\n            </div>\n        </div>\n        {/* <div className=\"fraction-sign\"></div> */}\n        {/* Closing parenthesis, if specified */}\n        {parens && <span className=\"paren fullheight\">)</span>}\n    </div>\n))\n","import React, { FC } from \"react\"\nimport Fraction from \"../..\"\nimport { FractionBase } from \"../FractionBase\"\n// import \"./Fraction.scss\"\n\nexport interface FractionDisplayProps {\n    frac: Fraction\n    parens?: boolean\n    className?: string | string[]\n}\n\n/**\n * Displays an existing Function.\n *\n * @param props\n *\n * @see Function\n */\nexport const FractionDisplay: FC<FractionDisplayProps> = ({\n    parens = false,\n    frac,\n    className,\n}) => <FractionBase {...{ parens, className, ...frac }} />\n\n// =============================================================================\n","/* eslint-disable capitalized-comments */\n\nimport React, {\n    CSSProperties,\n    FC,\n    FormEventHandler,\n    InputHTMLAttributes,\n} from \"react\"\n// import Debug from \"debug\"\nimport { FractionBase } from \"../FractionBase\"\nimport { FractionInputEventHandler, FractionInputMode } from \"../../types\"\n\nimport \"./FractionInput.scss\"\n\n// const debug = Debug(\"frac:view:FractionInput\")\n\nexport interface FractionInputProps {\n\n    /** Callback that is called when the user inputs a new valid Fraction value. */\n    onChange: FractionInputEventHandler\n\n    /**\n     * Current display and input mode. Defaults to `\"input\"`.\n     *\n     * @default \"input\"\n     * @see FractionInputMode\n     */\n    mode?: FractionInputMode\n\n    /** The numerator value to display. */\n    numerator: string\n\n    /** The denominator value to display. */\n    denominator: string\n}\n\n/**\n * A custom input component that looks like a fraction.\n *\n * Behavior is controlled by the `mode` prop. When `mode` is `\"input\"`, this\n * component accepts answers from the user, which are passed up via the\n * `onChange` event handler. `\"correct\"` and `\"incorrect\"` are display modes.\n * When in one of these modes, a provided `display` fraction is shown and the\n * component enters a read-only state. Note that providing a `display` value\n * when in `\"input\"` mode has no effect.\n *\n * @param props\n */\nexport const FractionInput: FC<FractionInputProps> = ({\n    onChange,\n    mode = \"input\",\n    numerator,\n    denominator,\n}) => {\n\n    /** Is `mode` a display mode? */\n    const readonly = !(mode === \"input\")\n\n    /** Is `mode` a display mode and do the input fields have populated values? */\n    const filled = mode === \"correct\" || mode === \"incorrect\"\n    const updateValue: (field: \"numerator\" | \"denominator\") => FormEventHandler<HTMLInputElement> =\n        field => e => onChange(field, e.currentTarget.value)\n\n    // Make both input boxes have the same width. Use the largest one, but no\n    // Smaller than 1 character\n    const style: CSSProperties = {\n        width: `${Math.max(numerator?.length ?? 0, denominator?.length ?? 0, 1)}ch`,\n        ...(filled\n            ? { backgroundColor: \"#282c34\", borderStyle: \"hidden\" }\n            : {}),\n    }\n    const commonInputProps: InputHTMLAttributes<HTMLInputElement> = {\n        style,\n        type:            \"text\",\n        pattern:         \"^-?[0-9]*$\",\n        disabled:        readonly,\n        \"aria-disabled\": readonly,\n    }\n\n    return (\n        <FractionBase\n            className={mode}\n            isNegative={false}\n            numerator={\n                <input\n                    name=\"numerator\"\n                    onInput={updateValue(\"numerator\")}\n                    title={\"numerator\"}\n                    value={numerator}\n                    {...commonInputProps}\n                />\n            }\n            denominator={\n                <input\n                    name=\"denominator\"\n                    onInput={updateValue(\"denominator\")}\n                    title={\"denominator\"}\n                    value={denominator}\n                    {...commonInputProps}\n                />\n            }\n        />\n    )\n}\n","import Fraction from \"./Fraction\"\nimport { Nullable } from \"../../../lib\"\nimport { FractionInputMode, RawFractionInput } from \"./types\"\n\nconst VALID_INT_REGEX = /^-?[0-9]+$/\nconst VALID_POSITIVE_INT_REGEX = /^[0-9]+$/\n\n/**\n * User numerator/denominator input check. Both must be ints, denominator must\n * be strictly positive.\n *\n * @private exported for testing\n *\n * @param n numerator value from input field.\n * @param d denominator value from input field.\n *\n * @returns an error message if invalid and a falsy value if valid\n */\nexport const invalidFrac = (n: string, d: string): string | false =>\n    (!n.length\n        && \"Answer is incomplete\") ||\n    (!d.length\n        && \"Answer is incomplete\") ||\n    (!VALID_INT_REGEX.test(n)\n        && \"Numerator must be a whole number\") ||\n    (!VALID_POSITIVE_INT_REGEX.test(d)\n        && \"Denominator must be a strictly positive whole number\") ||\n    // eslint-disable-next-line eqeqeq\n    ((d as unknown) == 0 // Better than 'd === \"0\"' cuz \"000\" is still 0.\n        && \"Denominator cannot be zero\")\n\nexport const userInputToFraction = (\n    numerator: string,\n    denominator: string\n): Fraction | string => (\n    invalidFrac(numerator, denominator) ||\n    new Fraction(Number.parseInt(numerator), Number.parseInt(denominator))\n)\n\n\ntype GetDisplayModeArgs = {\n    isDone: boolean\n    isCorrect: boolean\n    userSolution: Nullable<Fraction> | RawFractionInput\n}\n\n/**\n * Computes the appropriate FractionInput display mode from a subset of\n * worksheet state.\n *\n * @param args\n */\nexport const getDisplayMode = (\n    { isDone, isCorrect, userSolution }: GetDisplayModeArgs\n): FractionInputMode  => {\n    if (!isDone) {\n        return \"input\"\n    } else if (isCorrect) {\n        return \"correct\"\n    }\n\n    if (userSolution instanceof Array) {\n        const f = userInputToFraction(...userSolution)\n        return typeof f === \"string\" ? \"incomplete\": \"incorrect\"\n    } else {\n        return userSolution ? \"incorrect\": \"incomplete\"\n    }\n}\n","import Fraction from \"./Fraction\"\nexport default Fraction\n\nexport { FractionDisplay } from \"./components/fraction-display/FractionDisplay\"\nexport { FractionInput } from \"./components/fraction-input/FractionInput\"\nexport { getDisplayMode, userInputToFraction } from \"./util\"\n\nexport * from \"./types\"\nexport type { FractionDisplayProps as FractionComponentProps } from \"./components/fraction-display/FractionDisplay\"\nexport type { FractionInputProps } from \"./components/fraction-input/FractionInput\"\n","import { FC } from \"react\"\nimport classNames from \"classnames\"\n\nimport { Question, symbolFor } from \"..\"\nimport Fraction, { FractionDisplay } from \"../fraction\"\n\nimport \"./Question.scss\"\n\nexport interface QuestionBodyProps {\n\n    /**\n     * The question being displayed\n     */\n    question: Question\n}\n\n/**\n * Displays question information common across all question archetypes. In an\n * equation, this is the left-hand side.\n *\n * @param props the component's props\n *\n * @see QuestionBodyProps\n */\nexport const QuestionBody: FC<QuestionBodyProps> = ({ question, children }) => (\n    <div className=\"question\">\n        <QuestionNode question={question} />\n        {children}\n    </div>\n)\n\nconst QuestionNode: FC<QuestionBodyProps> = ({ question }) => {\n    if (question instanceof Fraction) {\n        return <FractionDisplay frac={question} />\n    }\n\n    const { left, right, operation } = question\n\n    return (\n        <>\n            <FractionDisplay frac={left} />\n            <span className={classNames(\"operation\", operation)}>{symbolFor(operation)}</span>\n            <QuestionNode question={right} />\n        </>\n    )\n}\n","import React, { FC, useMemo } from \"react\"\nimport {\n    shallowEqual,\n    useDispatch,\n    useSelector\n} from \"react-redux\"\nimport { BsCheck, BsExclamationTriangle, BsXCircle } from \"react-icons/bs\"\nimport { Question, solveQuestion } from \"..\"\nimport { RootState } from \"../../../app/state\"\nimport {\n    FractionInput,\n    FractionInputProps,\n    FractionInputEventHandler,\n    getDisplayMode,\n    userInputToFraction,\n    FractionInputMode,\n    FractionDisplay\n} from \"../fraction\"\nimport { QuestionBody } from \"./QuestionBody\"\nimport { IconBaseProps } from \"react-icons\"\nimport classNames from \"classnames\"\nimport { answerQuestion, QuestionState } from \"../../worksheet/worksheet.store\"\n\nconst QuestionModeIcon: FC<{ mode: FractionInputMode } & IconBaseProps> =\n    ({ mode, ...props }) => {\n        switch(mode) {\n            case \"input\":      return null\n            case \"correct\":    return <BsCheck title={mode} { ...props} />\n            case \"incorrect\":  return <BsXCircle title={mode} {...props} />\n            case \"incomplete\": return <BsExclamationTriangle title={mode} {...props} />\n        }\n    }\n\nexport type FillBlanksQuestionProps = Pick<FractionInputProps, \"numerator\" | \"denominator\" | \"onChange\"> & {\n    question: Question\n    isDone: boolean\n    questionNum?: number\n}\n\n/**\n * Displays a \"fill in the blanks\" question. The user is prompted with a fraction\n * input where they may type in their solution.\n *\n * @param props\n *\n * @see QuestionBody\n * @see FractionInput\n */\nexport const FillBlanksQuestion: FC<FillBlanksQuestionProps> = ({\n    question,\n    isDone,\n    numerator,\n    denominator,\n    questionNum,\n    ...rest\n}) => {\n    // Calculate correct answer to question\n    const solution = useMemo(() => solveQuestion(question), [question])\n\n    // Check user answer against solution\n    const isCorrect = useMemo( () => {\n        const f = userInputToFraction(numerator, denominator)\n        // Strings mean error messages, therefore incorrect\n        return typeof f !== \"string\" && f.eq(solution)\n    },\n    [numerator, denominator, solution])\n\n    // Derive mode from above checks + worksheet state\n    const mode = useMemo(\n        () => getDisplayMode({\n            isDone,\n            isCorrect,\n            userSolution: [numerator, denominator],\n        }),\n        [isDone, isCorrect, numerator, denominator]\n    )\n    const shouldDisplaySolution = mode === \"incorrect\" || mode === \"incomplete\"\n\n    // Pack it all up, send it down\n    const props: FractionInputProps = {\n        mode,\n        numerator,\n        denominator,\n        ...rest,\n    }\n\n    return (\n        <>\n            {questionNum != null &&\n                <span className=\"question-number\">\n                    {(questionNum + 1) + \".\"}\n                    &nbsp;\n                    <QuestionModeIcon mode={mode} className={classNames(\"icon\", mode)} />\n                </span>\n            }\n            <span className=\"question-wrapper\">\n                <QuestionBody question={question}>\n                    <span className=\"operation\">=</span>\n                    <FractionInput {...props} />\n                    {shouldDisplaySolution &&\n                        <FractionDisplay frac={solution} className=\"solution\" />}\n                </QuestionBody>\n            </span>\n        </>\n    )\n}\n\nexport interface ConnectedFillBlanksQuestionProps {\n    questionNum: number\n}\n\nexport const ConnectedFillBlanksQuestion: FC<ConnectedFillBlanksQuestionProps> = ({\n    questionNum,\n}) => {\n    const dispatch = useDispatch()\n    const {\n        question,\n        answer: [numerator = \"\", denominator = \"\"],\n    } = useSelector<RootState, QuestionState>(\n        state => state.worksheet.questions[questionNum],\n        shallowEqual\n    )\n\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n    const onAnswerChange: FractionInputEventHandler = (field, val) => {\n        if(field === \"numerator\") {\n            dispatch(answerQuestion(questionNum, val, denominator))\n        } else {\n            dispatch(answerQuestion(questionNum, numerator, val))\n        }\n    }\n\n    const props: FillBlanksQuestionProps = {\n        onChange: onAnswerChange,\n        question,\n        isDone,\n        numerator,\n        denominator,\n        questionNum,\n    }\n    return <FillBlanksQuestion {...props} />\n}\n","import { randomInt, } from \"../../lib\"\nimport Fraction, { Strategies } from \"./fraction\"\nimport { Operation, QuestionGenerationConfig } from \"./types\"\n\n/**\n * A practice problem for the user to solve. Questions are generated by the\n * desired generator function selected by the user.\n *\n * @see FractionGenerator\n */\nexport type Question =\n    | Fraction\n    | {\n        operation: Operation\n        left: Fraction\n        right: Question\n    }\n    ;\n\nexport interface SolveQuestionOpts {\n\n    /** Whether or not to simplify the solution. Defaults to `false`. */\n    simplify?: boolean\n}\n\n/**\n * Calculates the solution to a Question.\n *\n * @param q     the question to solve.\n * @param opts  options to tweak solution behavior\n *\n * @returns     the solution to the Question.\n */\nexport const solveQuestion = (\n    q: Question,\n    opts: SolveQuestionOpts = {}\n): Fraction => {\n    const { simplify = false } = opts\n\n    if (q instanceof Fraction) {\n        return simplify ? q.simplify() : q\n    }\n\n    const { operation , left, right } = q\n\n    switch (operation) {\n        case Operation.Addition:\n            return solveQuestion(left, opts).add(solveQuestion(right, opts))\n        case Operation.Subtraction:\n            return solveQuestion(left, opts).sub(solveQuestion(right, opts))\n        case Operation.Multiplication:\n            return solveQuestion(left, opts).mult(solveQuestion(right, opts))\n        case Operation.Division:\n            return solveQuestion(left, opts).div(solveQuestion(right, opts))\n    }\n}\n\n/**\n * Creates a random question.\n *\n * @param args fraction and question generation settings\n *\n * @returns a newly created `Question`.\n *\n * @see Question\n */\nexport const generateQuestion: (\n    args?: Partial<QuestionGenerationConfig>\n) => Question = ({ // Arguments are unpacked/repacked to establish defaults\n    operations = [Operation.Addition],\n    strategy = \"default\",\n    negative = false,\n    range = [1, 10] as [number, number],\n    countRange = [2, 3] as [number, number],\n    mixedFractions = false,\n} = {}) => _genQuestion({\n    operation: operations[randomInt(0, operations.length)],\n    negative,\n    range,\n    count:     randomInt(...countRange),\n    strategy,\n    mixedFractions,\n})\n\ntype GenQuestionArgs = Required<Omit<QuestionGenerationConfig, \"strategy\" | \"countRange\" | \"operations\">> & {\n\n    /** The fraction factory to use */\n    strategy: Strategies\n\n    /** The number of fractions in the question */\n    count: number\n\n    /** Arithmetic operation for this question subsection */\n    operation: Operation\n}\nconst _genQuestion: (args: GenQuestionArgs) => Question = args => {\n    const {\n        operation, negative, count, ...rest\n    } = args\n    const isNeg = negative && Math.random() < 0.5\n    // const left: Fraction = gen({ negative: isNeg, ...rest })\n    const left: Fraction = Fraction.generateFraction({\n        negative: isNeg,\n        ...rest,\n    })\n\n    return count <= 1\n        ? left\n        : {\n            operation,\n            left,\n            right: _genQuestion({ ...args, count: count - 1 }),\n        } as Question\n}\n\nexport const symbolFor = (op: Operation): string => {\n    switch (op) {\n        case Operation.Addition: return \"+\"\n        case Operation.Subtraction: return \"-\"\n        case Operation.Multiplication: return \"\\u00d7\"\n        case Operation.Division: return \"\\u00f7\"\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport Debug from \"debug\"\nimport { Operation, QuestionGenerationConfig, Strategies } from \"../question\"\n\nconst debug = Debug(\"frac:state:questionConfig\")\n\n/** Key where question config store object is stored in local storage. */\nconst LOCALSTORAGE_KEY = \"question-config-state\"\n\n/**\n * Gets the initial state for the question config store.\n *\n * This function checks if question config preferences have been cached in\n * local storage from previous sessions. If found, this value is used as the\n * initial state. If not found (e.g. this is the user's first time using the\n * app) the initial question config state is used.\n *\n * @returns A question generation config object to use as the initial state.\n *\n * @see initialState the default initial state\n * @see saveQuestionConfigStore saves the store to local storage\n */\nconst loadQuestionConfigStore = (): QuestionGenerationConfig => {\n    debug(\"loading state from local storage\")\n\n    try {\n        const serialized = localStorage.getItem(LOCALSTORAGE_KEY)\n        return serialized\n            ? (JSON.parse(serialized) as QuestionGenerationConfig)\n            : initialState\n    } catch (err) {\n        console.error(\"Failed to load question config state:\", err)\n        return initialState\n    }\n}\n\n/**\n * Saves the current value of the question config store into local storage.\n * This cached value is used as the store's initial state each time the\n * application starts, allowing the application to remember user preferences.\n *\n * @param store The question config store to save to local storage.\n *\n * @see loadQuestionConfigStore loads the saved store from local storage\n */\nconst saveQuestionConfigStore = (store: QuestionGenerationConfig): void => {\n    debug(\"saving state to local storage\")\n    try {\n        const serialized = JSON.stringify(store)\n        localStorage.setItem(LOCALSTORAGE_KEY, serialized)\n    } catch (err) {\n        console.error(\"Failed to save question config state:\", err)\n    }\n}\n\n/**\n * Initial state object for question slice\n */\nconst initialState: QuestionGenerationConfig = {\n    operations:     [Operation.Addition],\n    negative:       false,\n    range:          [1, 10],\n    countRange:     [2, 3],\n    strategy:       \"default\",\n    mixedFractions: false,\n}\n\nconst questionConfig = createSlice({\n    name:         \"questionConfig\",\n    initialState: loadQuestionConfigStore(),\n    reducers:     {\n\n        reset() {\n            return initialState\n        },\n\n        /**\n         * Adds an operation to the list of possible question types.\n         *\n         * @param state\n         * @param action\n         */\n        addOperation(state, action: PayloadAction<Operation>) {\n            !(state.operations) && (state.operations = [])\n\n            if (!state.operations.includes(action.payload)) {\n                state.operations?.push(action.payload)\n            }\n        },\n\n        /**\n         * Removes an operation to the list of possible question types.\n         *\n         * @param state\n         * @param action\n         */\n        removeOperation(state, action: PayloadAction<Operation>) {\n            !(state.operations) && (state.operations = [])\n            state.operations = state.operations.filter(el => el !== action.payload)\n        },\n\n        /**\n         * Updates the range of possible numerator/denominator values.\n         *\n         * @param state\n         * @param action\n         */\n        setValueRange(state, action: PayloadAction<[min: number, max: number]>) {\n            state.range = action.payload\n        },\n\n        /**\n         * Updates the minimum numerator/denominator value.\n         *\n         * @param state\n         * @param action\n         */\n        setValueMin(state, action: PayloadAction<number>) {\n            state.range && (state.range[0] = action.payload)\n        },\n\n        /**\n         * Updates the maximum numerator/denominator value.\n         *\n         * @param state\n         * @param action\n         */\n        setValueMax(state, action: PayloadAction<number>) {\n            state.range && (state.range[1] = action.payload)\n        },\n\n        setStrategy(state, action: PayloadAction<Strategies>) {\n            state.strategy = action.payload\n        },\n\n        setMixedFractions(state, action: PayloadAction<boolean>) {\n            state.mixedFractions = action.payload\n        },\n\n        setNegatives(state, action: PayloadAction<boolean>) {\n            state.negative = action.payload\n        },\n    },\n})\n\n// Export default questionConfig\nexport const {\n    reset,\n    addOperation,\n    removeOperation,\n    setValueRange,\n    setValueMin,\n    setValueMax,\n    setStrategy,\n    setMixedFractions,\n    setNegatives,\n} = questionConfig.actions\nexport { saveQuestionConfigStore }\nexport default questionConfig.reducer\n","import { Middleware } from \"redux\"\nimport Debug from \"debug\"\n\nconst debug = Debug(\"frac:state:middleware\")\n\nexport const logger: Middleware = store => next => action => {\n    debug(\"dispatching action '%s': %O\", action.type, action)\n    const result = next(action)\n    debug(\"next state: %O\", store.getState())\n\n    return result\n}\n\nexport const crashReporter: Middleware = store => next => action => {\n    try {\n        return next(action)\n    } catch (err) {\n        debug(\"State at error: %O\", store.getState())\n        err.state = store\n\n        throw err\n    }\n}\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\n\n// eslint-disable-next-line\nimport { QuestionGenerationConfig } from \"../../features/question\"\nimport questionConfig from \"../../features/worksheet/question-config.store\"\nimport worksheet from \"../../features/worksheet/worksheet.store\"\nimport { logger, crashReporter } from \"./middleware\"\n\n/** The root reducer */\nconst reducer = combineReducers({\n\n    /**\n     * User settings that configure how questions and fractions are\n     * generated. Includes things like how many questions to generate per\n     * worksheet, what operations are present in each question, etc.\n     *\n     * @see QuestionGenerationConfig\n     */\n    questionConfig,\n\n    /**\n     * Active worksheet state. Includes list of current questions, etc.\n     *\n     * @see WorksheetState\n     */\n    worksheet,\n})\n\n/** The application's Redux store. */\nconst store = configureStore({\n    reducer,\n    middleware: defaults => defaults({\n        serializableCheck: false, // TODO(don): Probably shouldn't do this, but we need to store fractions ¯\\_(ツ)_/¯\n    }).concat(logger, crashReporter),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport default store\n","import Debug from \"debug\"\nimport { generateQuestion, Question } from \"../../features/question\"\nimport { setQuestions } from \"../../features/worksheet/worksheet.store\"\nimport store from \"./store\"\n\nconst debug = Debug(\"frac:state:dispatch\")\n\n/**\n * Generates a random set of questions using the user's question generation\n * settings.\n *\n * @param num the number of questions to generate\n *\n * @see generateQuestion\n */\nexport const generateQuestions = (num: number): void => {\n    debug(\"generating %d questions\", num)\n    const questions: Question[] = []\n    const { questionConfig } = store.getState()\n\n    for (let i = 0; i < num; i++) {\n        questions.push(generateQuestion(questionConfig))\n    }\n\n    store.dispatch(setQuestions(questions))\n}\n\n// TODO: Move this out of dispatchers. Need to extract questions state into\n// separate folder first.\n/**\n * Checks if the user has not started answering questions yet.\n *\n * @returns `true` if all answers are empty, `false` otherwise.\n */\nexport const isWorksheetEmpty = (): boolean => store.getState().worksheet.questions\n    .map(q => q.answer)                      // Extract worksheet answers\n    .map(([n, d]) => !n.length && !d.length) // Each el is true if n & d are empty\n    .reduce((acc, el) => acc && el)          // Logical and it all together\n","import React, { FC } from \"react\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\n\nimport {\n    RootState,\n} from \"../../app/state\"\nimport { setDone, clearQuestions } from \"./worksheet.store\"\nimport { Button } from \"../../components/button/Button\"\n\nimport \"./FlowWorksheet.scss\"\nimport { generateQuestions } from \"../../app/state/dispatchers\"\nimport { ConnectedFillBlanksQuestion } from \"../question\"\nimport { times } from \"ramda\"\nimport { BsArrowClockwise, BsCheckCircle } from \"react-icons/bs\"\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlowWorksheetProps { }\n\n/**\n * A fractions worksheet with a responsive layout. Questions are displayed in a\n * grid that changes dimensions depending on the client's viewport size. This\n * worksheet is meant to be used on a browser, not printed.\n *\n * @param props Component props\n */\nexport const FlowWorksheet: FC<FlowWorksheetProps> = () => {\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n    const numQuestions = useSelector<RootState, number>(\n        state => state.worksheet.questions.length,\n        shallowEqual\n    )\n    const dispatch = useDispatch()\n    const finishWorksheet = () => dispatch(setDone())\n    const resetWorksheet = () => {\n        dispatch(clearQuestions())\n        generateQuestions(24)\n    }\n    return (\n        <main>\n            <form className=\"worksheet container\">\n                <div className=\"grid row\" role=\"list\">\n                    {times(\n                        i => (\n                            <div\n                                key={i}\n                                className=\"col-12 col-sm-6 col-md-4 col-xxl-2\"\n                                role=\"listitem\"\n                            >\n                                <ConnectedFillBlanksQuestion questionNum={i} />\n                            </div>\n                        ),\n                        numQuestions\n                    )}\n                </div>\n                <div className=\"button-group\">\n                    {!isDone &&\n                <Button\n                    type=\"button\"\n                    role=\"submit\"\n                    primary\n                    onClick={finishWorksheet}\n                >\n                    <BsCheckCircle /> Finish\n                </Button>\n                    }\n                    <Button\n                        type=\"button\"\n                        role=\"reset\"\n                        primary={isDone}\n                        onClick={resetWorksheet}\n                    >\n                        <BsArrowClockwise /> Reset\n                    </Button>\n                </div>\n            </form>\n        </main>\n    )\n}\n","import React, { FC } from \"react\"\nimport { BsFillHeartFill } from \"react-icons/bs\"\n\nimport \"./Footer.scss\"\n\nexport interface FooterProps {\n\n}\n\nexport const Footer: FC<FooterProps> = () => (\n    <footer>\n        <h3>Made with <BsFillHeartFill title=\"love\" /> by <a href=\"https://github.com/DonIsaac\" target=\"_blank\" rel=\"noreferrer\">Don</a></h3>\n    </footer>\n)\n","import React, { FC } from \"react\"\nimport { BsFillGearFill } from \"react-icons/bs\"\nimport { Button } from \"../../button\"\n\nimport \"./Header.scss\"\n\nexport type HeaderLinkName = \"settings\"\nexport interface HeaderProps {\n    onClick: (linkName: HeaderLinkName) => void\n}\n\nexport const Header: FC<HeaderProps> = ({\n    onClick,\n}) => (\n    <header>\n        <h1>Fraction Worksheet Generator</h1>\n        <nav>\n            <Button primary className=\"settings\" onClick={() => onClick(\"settings\")}>\n                <BsFillGearFill /> Settings\n            </Button>\n        </nav>\n    </header>\n)\n","/**\n * @file FormComponents.tsx\n *\n * Contains components used by SettingsForm.tsx\n */\nimport React, { PropsWithChildren, FC } from \"react\"\nimport classNames from \"classnames\"\nimport { AnyAction } from \"@reduxjs/toolkit\"\nimport { useDispatch } from \"react-redux\"\n\nexport type InputProps<\n    P, A extends (arg: P) => AnyAction // PayloadActionCreator<P>\n> = {\n\n    /**\n     * Used for `id`, `name`, etc.\n     */\n    name: string\n\n    /**\n     * Current value of input\n     */\n    value: P\n\n    /**\n     * Creates action that is dispatched when value is changed.\n     */\n    action: A\n}\n\n/**\n * A form input field that dispatches an action when its value changes.\n */\ntype InputComponent<P> = <A extends (arg: P) => AnyAction>(\n    props: InputProps<P, A>\n) => React.ReactElement | null\n\n/**\n * Inline checkbox input component.\n *\n * @see {@link https://getbootstrap.com/docs/4.0/components/forms/#inline}\n *\n * @param props\n */\nexport const CheckboxInput: InputComponent<boolean> = ({ name, value, action }) => {\n    const dispatch = useDispatch()\n\n    return (\n        <input\n            id={name}\n            name={name}\n            type=\"checkbox\"\n            checked={value}\n            className=\"form-check-input\"\n            onChange={\n                () => dispatch(action(!value))\n            }\n        />\n    )\n}\n\nexport const NumberInput: InputComponent<number> = ({ name, value, action }) => {\n    const dispatch = useDispatch()\n\n    return (\n        <input\n            id={name}\n            name={name}\n            type=\"number\"\n            min={0}\n            value={value}\n            className=\"form-input\"\n            onChange={\n                e => dispatch(action(Number.parseInt(e.target.value)))\n            }\n        />\n    )\n}\n\ntype FormGroupProps = {\n    className?: string\n    legend?: string\n}\n\n/**\n * @see {@link https://getbootstrap.com/docs/4.0/components/forms/#form-groups}\n *\n * @param props\n */\nexport const FormGroup: FC<PropsWithChildren<FormGroupProps>> =\n    ({ className, legend, children }) => (\n        <div className={classNames(\"col-12 form-group mb-3\", className)}>\n            <fieldset>\n                {legend && <legend>{legend}</legend>}\n                <div className=\"text-center\">\n                    {children}\n                </div>\n            </fieldset>\n        </div>\n    )\n","import React, { FC } from \"react\"\nimport { PayloadAction } from \"@reduxjs/toolkit\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\nimport { BsCheckCircle, BsArrowClockwise } from \"react-icons/bs\"\n\nimport { Operation, QuestionGenerationConfig, symbolFor } from \"../../../features/question\"\nimport {\n    RootState,\n} from \"../../../app/state\"\nimport { Button } from \"../../button\"\nimport { CheckboxInput, NumberInput, FormGroup } from \"./FormComponents\"\nimport {\n    addOperation,\n    removeOperation,\n    reset,\n    setMixedFractions,\n    setNegatives,\n    setValueMax,\n    setValueMin\n} from \"../../../features/worksheet/question-config.store\"\n\nimport \"./SettingsForm.scss\"\nexport interface SettingsFormProps {\n    onDone: () => void\n}\n\nexport const SettingsForm: FC<SettingsFormProps> = ({ onDone }) => {\n    const dispatch = useDispatch()\n    const {\n        operations,\n        range: [valueMin = 1, valueMax = 10] = [],\n        // CountRange: [countMin = 2, countMax = 3] = [],\n        mixedFractions = false,\n        negative = false,\n    } = useSelector<RootState, QuestionGenerationConfig>(\n        store => store.questionConfig,\n        shallowEqual\n    )\n    return (\n        <form className=\"settings-form\">\n            <div className=\"row\">\n                {/* Operations */}\n                <OperationsInputGroup operations={operations} />\n\n                {/* Value Range */}\n                <FormGroup legend=\"Value Range\">\n                    <NumberInput\n                        name=\"value-min\"\n                        value={valueMin}\n                        action={setValueMin}\n                    /> To <NumberInput\n                        name=\"value-max\"\n                        value={valueMax}\n                        action={setValueMax}\n                    />\n                </FormGroup>\n\n                {/* Negatives and Mixed Fractions */}\n                <FormGroup legend=\"Fraction Properties\">\n                    <div className=\"col form-check form-check-inline\">\n                        <label htmlFor=\"negatives\" className=\"form-check-label\">Negatives?</label>\n                        <CheckboxInput name=\"negatives\" value={negative} action={setNegatives} />\n                    </div>\n                    <div className=\"col form-check form-check-inline\">\n                        <label htmlFor=\"mixed-fractions\" className=\"form-check-label\">Mixed Fractions?</label>\n                        <CheckboxInput name=\"mixed-fractions\" value={mixedFractions} action={setMixedFractions} />\n                    </div>\n                </FormGroup>\n            </div>\n\n            {/* Control Buttons */}\n            <div className=\"button-group row centered\">\n                <div className=\"col-12\">\n                    <Button role=\"submit\" primary onClick={onDone}>\n                        <BsCheckCircle /> Done\n                    </Button>\n                    <Button role=\"clear\" onClick={() => dispatch(reset())}>\n                        <BsArrowClockwise /> Reset\n                    </Button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\ntype OnOpChange = (checked: boolean) => PayloadAction<string>\nconst OperationsInputGroup: FC<{ operations: Operation[] }> = ({\n    operations,\n}) => {\n\n    const onChange: (op: Operation) => OnOpChange =\n        op => checked => checked\n            ? addOperation(op)\n            : removeOperation(op)\n\n    return (\n\n        <FormGroup legend=\"Operations\">\n            {/* <label className=\"form-label\">Operations: </label> */}\n            {Object.keys(Operation).map(opName => {\n                const name = `op-${opName.toLowerCase()}`\n                const op: Operation = (\n                    Operation as Record<string, string>\n                )[opName] as Operation\n                const display = symbolFor(op)\n                const props = {\n                    name,\n                    value:  operations.includes(op),\n                    action: onChange(op),\n                }\n\n                return (\n                    <div className=\"form-check form-check-inline\" key={name}>\n                        <CheckboxInput {...props} />\n                        <label htmlFor={name} className=\"form-check-label\">{display}</label>\n                        &nbsp;\n                    </div>\n                )\n            })}\n        </FormGroup>\n    )\n}\n","import store from \"./store\"\nexport * from \"./store\"\nexport * from \"./dispatchers\"\nexport default store\n","import React, { MouseEventHandler, PropsWithChildren, useEffect } from \"react\"\nimport { Variants, motion } from \"framer-motion\"\nimport { BsX } from \"react-icons/bs\"\n\nimport \"./Modal.scss\"\n\nconst modalVariants: Variants = {\n    open: {\n        display:    \"\",\n        opacity:    1,\n        transition: {\n            // Delay: 0,\n        },\n    },\n    closed: {\n        display:    \"none\",\n        opacity:    0,\n        transition: {\n            delay: 0.75,\n        },\n    },\n}\nconst bodyVariants: Variants = {\n    open: {\n        scale:      1,\n        transition: {\n            type: \"spring\",\n        },\n    },\n    closed: {\n        scale:      0,\n        transition: {\n            type: \"spring\",\n            // Delay: 0.5,\n        },\n    },\n}\n\nexport interface ModalProps {\n    onClose: () => void;\n\n    /**\n     * Whether or not the Modal is visible and displayed.\n     * @default true\n     */\n    visible?: boolean\n    title?: string | JSX.Element\n}\n\nconst Modal = React.forwardRef<HTMLDivElement, PropsWithChildren<ModalProps>>(\n    ({\n        children,\n        onClose,\n        visible = true,\n        title = \"\",\n    }, ref) => {\n        const handleKeyPress = (e: KeyboardEvent) => {\n            if (visible && e.key?.toLowerCase().includes(\"esc\")) {\n                onClose()\n            }\n        }\n\n        const doNotClose: MouseEventHandler = e => e.stopPropagation()\n\n        useEffect(() => {\n            document.addEventListener(\"keydown\", handleKeyPress)\n\n            return () => {\n                document.removeEventListener(\"keydown\", handleKeyPress)\n            }\n        })\n\n        return <motion.div\n            className=\"modal\"\n            animate={visible ? \"open\" : \"closed\"}\n            initial={false}\n            variants={modalVariants}\n            onClick={onClose}\n        >\n            <motion.div\n                className=\"modal-body\"\n                ref={ref}\n                variants={bodyVariants}\n                onClick={doNotClose}\n            >\n                <header className=\"modal-header\">\n                    <div className=\"modal-controls\">\n                        <button className=\"close\" aria-label=\"close\" onClick={onClose}>\n                            <BsX />\n                        </button>\n                    </div>\n                    <div className=\"modal-title\">\n                        {typeof title === \"string\" ? <h2 className=\"title\">{title}</h2> : title}\n                    </div>\n                </header>\n                <div className=\"modal-content\">\n                    {children}\n                </div>\n            </motion.div>\n        </motion.div>\n    })\n\nexport default Modal\n","import Modal from \"./Modal\"\nexport default Modal\nexport * from \"./Modal\"\n","import React, { Component, ErrorInfo, PropsWithChildren } from \"react\"\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype ErrorBoundaryProps = PropsWithChildren<{}>\nexport interface ErrorBoundaryState {\n    hasError: boolean\n}\n\nexport class ErrorBoundary extends Component<\n    ErrorBoundaryProps,\n    ErrorBoundaryState\n> {\n    constructor(props: PropsWithChildren<Record<string, never>>) {\n        super(props)\n        this.state = { hasError: false }\n    }\n\n    static getDerivedStateFromError(error: unknown): Partial<ErrorBoundaryState> {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true }\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n        console.error(error)\n        console.error(errorInfo)\n    }\n\n    render(): React.ReactNode {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return (\n                <div>\n                    <h1>Something went wrong, please try again.</h1>\n                    <p>If this continues, please <a href=\"https://github.com/DonIsaac/Fraction-Worksheet-Generator/issues\">submit a bug report</a>.</p>\n                </div>\n            )\n\n        }\n\n        return this.props.children\n    }\n}\n","import React, { FC, useState } from \"react\"\nimport { shallowEqual, useSelector } from \"react-redux\"\nimport Debug from \"debug\"\n\nimport {\n    FlowWorksheet,\n    Footer,\n    Header,\n    HeaderLinkName,\n    SettingsForm\n} from \"../components/page\"\nimport { generateQuestions, isWorksheetEmpty, RootState,  } from \"./state\"\n\nimport Modal from \"../components/modal\"\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport logo from \"./logo.svg\"\nimport \"./App.scss\"\nimport { ErrorBoundary } from \"../components/boundary/ErrorBoundary\"\nimport { saveQuestionConfigStore } from \"../features/worksheet/question-config.store\"\n\n// TODO: make this configurable\nconst NUM_QUESTIONS = 24\nconst debug = Debug(\"frac:view:App\")\n\nconst App: FC = () => {\n    const [modalVisible, setModalVisible] = useState(false)\n    const [questionsGenerated, setQuestionsGenerated] = useState(false)\n    const [oldQuestionConfig, setOldQuestionConfig] = useState<RootState[\"questionConfig\"] | undefined>()\n    const questionConfig = useSelector<RootState, RootState[\"questionConfig\"]>(\n        state => state.questionConfig,\n        shallowEqual\n    )\n    const isDone = useSelector<RootState, boolean>(\n        state => state.worksheet.isDone,\n        shallowEqual\n    )\n\n    // First-time question generation, run only on first render\n    if (!(questionsGenerated || isDone)) {\n        debug(\"Running first-time question generation\")\n        generateQuestions(NUM_QUESTIONS)\n        setQuestionsGenerated(true)\n    }\n\n    const onSettingsDone = () => {\n        debug(\"onSettingsDone() called\")\n\n        // Create new worksheet if convenient and possible\n        if (\n            !isDone &&\n            isWorksheetEmpty() &&\n            !shallowEqual(oldQuestionConfig, questionConfig)\n        ) {\n            generateQuestions(NUM_QUESTIONS)\n        }\n\n        // Save preferences to local storage\n        saveQuestionConfigStore(questionConfig)\n\n        // Hide settings modal\n        setModalVisible(false)\n    }\n\n    const onHeaderClick = (linkName: HeaderLinkName) => {\n        debug(\"onHeaderClick('%s') called\", linkName)\n\n        if (linkName === \"settings\") {\n            setOldQuestionConfig(questionConfig)\n            setModalVisible(!modalVisible)\n        }\n    }\n\n    return (\n        <>\n            <Header onClick={onHeaderClick}/>\n            <Modal\n                visible={modalVisible}\n                title=\"Settings\"\n                onClose={onSettingsDone}\n            >\n                <ErrorBoundary>\n                    <SettingsForm onDone={onSettingsDone}/>\n                </ErrorBoundary>\n            </Modal>\n            <ErrorBoundary>\n                <FlowWorksheet />\n            </ErrorBoundary>\n            <Footer />\n        </>\n    )\n}\n\nexport default App\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport Debug from \"debug\"\n\nimport App from \"./app/App\"\nimport store from \"./app/state\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nimport \"./index.scss\"\n\n// Namespaces need to be manually enabled because webpack weirdness\nconst namespaces = process.env.DEBUG || (\n    process.env.NODE_ENV === \"production\"\n        ? \"\"\n        : \"frac:*\"\n)\n\nDebug.enable(namespaces)\nDebug.log = console.info.bind(console)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// To log results (for example: reportWebVitals(console.log))\n// Or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// ReportWebVitals(console.log)\nreportWebVitals()\n"],"sourceRoot":""}